PK
     �*7[���      
   .gitignorenode_modules/
PK
     �*7[�e���  �     eslint.config.jsimport js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);
PK
     �*7[w���  �  
   index.html<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Enterprise Inventory & Sales Application</title>
    
    <meta name="description" content="A comprehensive web-based enterprise inventory and sales application UI built with React and Tailwind CSS." />
    <meta name="author" content="Dualite Alpha" />

    <meta property="og:title" content="Enterprise Inventory & Sales Application" />
    <meta property="og:description" content="A comprehensive web-based enterprise inventory and sales application UI built with React and Tailwind CSS." />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://alpha.dualite.dev" />
    <meta property="og:image" content="https://ibb.co/67X3xfSV" />
    <meta property="og:image:width" content="960" />
    <meta property="og:image:height" content="600" />
    <meta property="og:image:alt" content="Screenshot of the Enterprise Inventory & Sales Application dashboard." />
    
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Enterprise Inventory & Sales Application" />
    <meta name="twitter:description" content="A comprehensive web-based enterprise inventory and sales application UI built with React and Tailwind CSS." />
    <meta name="twitter:site" content="@dualitedev" />
    <meta name="twitter:image" content="https://ibb.co/67X3xfSV" />

    <link rel="canonical" href="https://alpha.dualite.dev" />

     <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "WebSite",
      "name": "AlphaProject",
      "url": "https://alpha.dualite.dev",
      "description": "Dualite Alpha Generated Project",
      "publisher": {
        "@type": "Organization",
        "name": "Dualite Alpha",
      }
    }
    </script>

  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
PK
     �*7[5~=  =     package.json{
  "name": "vite-react-javascript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@faker-js/faker": "^10.0.0",
    "axios": "^1.9.0",
    "date-fns": "^4.1.0",
    "framer-motion": "^12.23.18",
    "lucide-react": "^0.511.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.9.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.27.0",
    "@vitejs/plugin-react": "^4.5.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.27.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "vite": "^6.3.5"
  }
}
PK
     �*7[S0�^   ^      postcss.config.jsexport default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
};
PK
     �*7[               src/PK
     �*7[.n�Y  Y     src/App.jsximport React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import LoginScreen from './components/auth/LoginScreen';
import MainLayout from './components/layout/MainLayout';
import Dashboard from './components/dashboard/Dashboard';

import EnquiryList from './components/enquiry/EnquiryList';
import EnquiryDetail from './components/enquiry/EnquiryDetail';

import BudgetList from './components/budget/BudgetList';
import BudgetCreateEdit from './components/budget/BudgetCreateEdit';

import QuotationList from './components/quotation/QuotationList';
import QuotationCreateEdit from './components/quotation/QuotationCreateEdit';

import ReceivedOrderList from './components/orders/ReceivedOrderList';
import ReceivedOrderForm from './components/orders/ReceivedOrderForm';

import SalesOrderList from './components/orders/SalesOrderList';
import SalesOrderForm from './components/orders/SalesOrderForm';

import FPOList from './components/fpo/FPOList';
import FPOForm from './components/fpo/FPOForm';

import InwardReceipt from './components/inward/InwardReceipt';
import IssuanceList from './components/issuance/IssuanceList';
import IssuanceDetail from './components/issuance/IssuanceDetail';
import InvoiceList from './components/invoice/InvoiceList';
import InvoiceForm from './components/invoice/InvoiceForm';

import InventoryMaster from './components/inventory/InventoryMaster';
import InventoryBlockingList from './components/inventory/InventoryBlockingList';

import AuditTrail from './components/audit/AuditTrail';
import Settings from './components/settings/Settings';

import { AuthProvider, useAuth } from './context/AuthContext';
import { NotificationProvider } from './context/NotificationContext';

function AppRoutes() {
  const { user } = useAuth();

  if (!user) {
    return <LoginScreen />;
  }

  return (
    <MainLayout>
      <Routes>
        <Route path="/" element={<Navigate to="/dashboard" replace />} />
        <Route path="/dashboard" element={<Dashboard />} />
        
        <Route path="/enquiries" element={<EnquiryList />} />
        <Route path="/enquiries/:id" element={<EnquiryDetail />} />
        
        <Route path="/budgets" element={<BudgetList />} />
        <Route path="/budget/new" element={<BudgetCreateEdit />} />
        <Route path="/budget/:id" element={<BudgetCreateEdit />} />
        
        <Route path="/quotations" element={<QuotationList />} />
        <Route path="/quotations/new" element={<QuotationCreateEdit />} />
        <Route path="/quotations/:id" element={<QuotationCreateEdit />} />
        
        <Route path="/received-orders" element={<ReceivedOrderList />} />
        <Route path="/received-orders/new" element={<ReceivedOrderForm />} />
        <Route path="/received-orders/:id" element={<ReceivedOrderForm />} />
        
        <Route path="/sales-orders" element={<SalesOrderList />} />
        <Route path="/sales-orders/new" element={<SalesOrderForm />} />
        <Route path="/sales-orders/:id" element={<SalesOrderForm />} />
        
        <Route path="/blocking" element={<InventoryBlockingList />} />
        
        <Route path="/fpo" element={<FPOList />} />
        <Route path="/fpo/new" element={<FPOForm />} />
        <Route path="/fpo/:id" element={<FPOForm />} />
        
        <Route path="/inward" element={<InwardReceipt />} />
        
        <Route path="/issuance" element={<IssuanceList />} />
        <Route path="/issuance/:id" element={<IssuanceDetail />} />
        
        <Route path="/invoices" element={<InvoiceList />} />
        <Route path="/invoices/new" element={<InvoiceForm />} />
        <Route path="/invoices/:id" element={<InvoiceForm />} />
        
        <Route path="/inventory" element={<InventoryMaster />} />
        <Route path="/audit-trail" element={<AuditTrail />} />
        <Route path="/settings" element={<Settings />} />
      </Routes>
    </MainLayout>
  );
}

function App() {
  return (
    <AuthProvider>
      <NotificationProvider>
        <Router>
          <AppRoutes />
        </Router>
      </NotificationProvider>
    </AuthProvider>
  );
}

export default App;
PK
     �*7[���;=   =      src/index.css@tailwind base;
@tailwind components;
@tailwind utilities;
PK
     �*7[��`��   �      src/main.jsximport { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.jsx';
import './index.css';

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
);
PK
     �*7[��8         tailwind.config.js// tailwind.config.js
const defaultTheme = require('tailwindcss/defaultTheme')

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/**/*.{js,jsx,ts,tsx}',
  ],
  theme: {
    extend: {}
  },
  plugins: [],
};
PK
     �*7[9�Qh�   �      vite.config.tsimport { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});
PK
     �*7[               src/context/PK
     �*7[�]ƽ;  ;     src/context/AuthContext.jsximport React, { createContext, useContext, useState } from 'react';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  const login = (email, role, rememberMe) => {
    const userData = {
      id: 1,
      email,
      role,
      name: role === 'Sales Executive' ? 'John Smith' : 
            role === 'Sales Manager' ? 'Sarah Johnson' : 'Mike Wilson',
      avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(role)}&background=3b82f6&color=fff`
    };
    setUser(userData);
    
    if (rememberMe) {
      localStorage.setItem('user', JSON.stringify(userData));
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('user');
  };

  const value = {
    user,
    login,
    logout
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
PK
     �*7[�ž�  �  #   src/context/NotificationContext.jsximport React, { createContext, useContext, useState } from 'react';

const NotificationContext = createContext();

export const useNotifications = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotifications must be used within a NotificationProvider');
  }
  return context;
};

export const NotificationProvider = ({ children }) => {
  const [notifications, setNotifications] = useState([
    {
      id: 1,
      title: 'Budget Approval Required',
      message: 'Budget B-2024-001 submitted for approval',
      type: 'approval',
      time: '5 minutes ago',
      read: false
    },
    {
      id: 2,
      title: 'FPO Delivered',
      message: 'FPO F-2024-003 has been delivered to warehouse',
      type: 'delivery',
      time: '1 hour ago',
      read: false
    },
    {
      id: 3,
      title: 'Block Request Approved',
      message: 'Inventory block for SO-2024-015 approved',
      type: 'approval',
      time: '2 hours ago',
      read: true
    }
  ]);

  const markAsRead = (id) => {
    setNotifications(prev => 
      prev.map(notif => 
        notif.id === id ? { ...notif, read: true } : notif
      )
    );
  };

  const unreadCount = notifications.filter(n => !n.read).length;

  const value = {
    notifications,
    unreadCount,
    markAsRead
  };

  return (
    <NotificationContext.Provider value={value}>
      {children}
    </NotificationContext.Provider>
  );
};
PK
     �*7[               src/components/PK
     �*7[               src/components/auth/PK
     �*7[X?�Am  m  #   src/components/auth/LoginScreen.jsximport React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import { Building2, Mail, Lock, Eye, EyeOff } from 'lucide-react';

const LoginScreen = () => {
  const { login } = useAuth();
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    role: 'Sales Executive',
    rememberMe: false
  });
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);

  const roles = ['Sales Executive', 'Sales Manager', 'Storekeeper'];

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    // Simulate API call
    setTimeout(() => {
      login(formData.email, formData.role, formData.rememberMe);
      setLoading(false);
    }, 1000);
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <div className="mx-auto h-16 w-16 bg-blue-600 rounded-lg flex items-center justify-center">
            <Building2 className="h-8 w-8 text-white" />
          </div>
          <h2 className="mt-6 text-3xl font-bold text-gray-900">
            Enterprise Inventory
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            Sign in to your account
          </p>
        </div>

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="role" className="block text-sm font-medium text-gray-700">
                Role
              </label>
              <select
                id="role"
                name="role"
                value={formData.role}
                onChange={handleInputChange}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                required
              >
                {roles.map(role => (
                  <option key={role} value={role}>{role}</option>
                ))}
              </select>
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email address
              </label>
              <div className="mt-1 relative">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={formData.email}
                  onChange={handleInputChange}
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter your email"
                />
              </div>
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Password
              </label>
              <div className="mt-1 relative">
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                <input
                  id="password"
                  name="password"
                  type={showPassword ? 'text' : 'password'}
                  autoComplete="current-password"
                  required
                  value={formData.password}
                  onChange={handleInputChange}
                  className="block w-full pl-10 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter your password"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2"
                >
                  {showPassword ? (
                    <EyeOff className="h-5 w-5 text-gray-400" />
                  ) : (
                    <Eye className="h-5 w-5 text-gray-400" />
                  )}
                </button>
              </div>
            </div>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <input
                id="rememberMe"
                name="rememberMe"
                type="checkbox"
                checked={formData.rememberMe}
                onChange={handleInputChange}
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <label htmlFor="rememberMe" className="ml-2 block text-sm text-gray-700">
                Remember me
              </label>
            </div>

            <div className="text-sm">
              <a href="#" className="font-medium text-blue-600 hover:text-blue-500">
                Forgot password?
              </a>
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={loading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'Signing in...' : 'Sign in'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default LoginScreen;
PK
     �*7[               src/components/layout/PK
     �*7[����  �  $   src/components/layout/MainLayout.jsximport React, { useState } from 'react';
import Sidebar from './Sidebar';
import TopBar from './TopBar';

const MainLayout = ({ children }) => {
  const [sidebarOpen, setSidebarOpen] = useState(false);

  return (
    <div className="h-screen flex overflow-hidden bg-gray-100">
      {/* Sidebar */}
      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
      
      {/* Main content area */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Top bar */}
        <TopBar onMenuClick={() => setSidebarOpen(true)} />
        
        {/* Main content */}
        <main className="flex-1 overflow-auto bg-gray-50 p-6">
          {children}
        </main>
      </div>
    </div>
  );
};

export default MainLayout;
PK
     �*7[��r�J  J  !   src/components/layout/Sidebar.jsximport React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { 
  Home, MessageSquare, Calculator, FileText, ShoppingCart, 
  Package, Lock, Truck, ArrowDownCircle, ArrowUpCircle, 
  Receipt, Archive, ClipboardList, Settings, X, Building2
} from 'lucide-react';
import { useAuth } from '../../context/AuthContext';

const Sidebar = ({ isOpen, onClose }) => {
  const location = useLocation();
  const { user } = useAuth();

  const navigationItems = [
    { name: 'Dashboard', href: '/dashboard', icon: Home },
    { name: 'Enquiries', href: '/enquiries', icon: MessageSquare },
    { name: 'Budgets', href: '/budgets', icon: Calculator },
    { name: 'Quotations', href: '/quotations', icon: FileText },
    { name: 'Received Orders', href: '/received-orders', icon: ShoppingCart },
    { name: 'Sales Orders', href: '/sales-orders', icon: Package },
    { name: 'Inventory Blocking', href: '/blocking', icon: Lock },
    { name: 'FPO', href: '/fpo', icon: Truck },
    { name: 'Inward', href: '/inward', icon: ArrowDownCircle },
    { name: 'Issuance', href: '/issuance', icon: ArrowUpCircle },
    { name: 'Invoices', href: '/invoices', icon: Receipt },
    { name: 'Inventory Master', href: '/inventory', icon: Archive },
    { name: 'Audit Trail', href: '/audit-trail', icon: ClipboardList },
    { name: 'Settings', href: '/settings', icon: Settings }
  ];

  const filteredItems = navigationItems.filter(item => {
    // Filter based on user role
    if (user?.role === 'Storekeeper') {
      return ['Dashboard', 'FPO', 'Inward', 'Issuance', 'Inventory Master', 'Audit Trail', 'Settings'].includes(item.name);
    }
    return true; // Sales Executive and Sales Manager see all items
  });

  return (
    <>
      {/* Mobile overlay */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-gray-600 bg-opacity-75 lg:hidden z-20"
          onClick={onClose}
        />
      )}

      {/* Sidebar */}
      <div className={`
        fixed inset-y-0 left-0 z-30 w-64 bg-white shadow-lg transform transition-transform duration-300 ease-in-out
        lg:translate-x-0 lg:static lg:inset-0
        ${isOpen ? 'translate-x-0' : '-translate-x-full'}
      `}>
        <div className="flex items-center justify-between h-16 px-6 border-b border-gray-200">
          <div className="flex items-center">
            <Building2 className="h-8 w-8 text-blue-600" />
            <span className="ml-2 text-lg font-semibold text-gray-900">Inventory</span>
          </div>
          <button
            onClick={onClose}
            className="lg:hidden p-1 rounded-md hover:bg-gray-100"
          >
            <X className="h-5 w-5" />
          </button>
        </div>

        <nav className="mt-6 px-3">
          <div className="space-y-1">
            {filteredItems.map((item) => {
              const isActive = location.pathname === item.href || 
                (item.href !== '/dashboard' && location.pathname.startsWith(item.href));
              
              return (
                <Link
                  key={item.name}
                  to={item.href}
                  onClick={onClose}
                  className={`
                    group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors
                    ${isActive 
                      ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700' 
                      : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'
                    }
                  `}
                >
                  <item.icon className={`
                    mr-3 h-5 w-5 flex-shrink-0
                    ${isActive ? 'text-blue-700' : 'text-gray-400 group-hover:text-gray-500'}
                  `} />
                  {item.name}
                </Link>
              );
            })}
          </div>
        </nav>
      </div>
    </>
  );
};

export default Sidebar;
PK
     �*7[-���L  L      src/components/layout/TopBar.jsximport React, { useState } from 'react';
import { Search, Bell, Menu, ChevronDown, LogOut } from 'lucide-react';
import { useAuth } from '../../context/AuthContext';
import { useNotifications } from '../../context/NotificationContext';
import NotificationPanel from '../notifications/NotificationPanel';

const TopBar = ({ onMenuClick }) => {
  const { user, logout } = useAuth();
  const { unreadCount } = useNotifications();
  const [showNotifications, setShowNotifications] = useState(false);
  const [showUserMenu, setShowUserMenu] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  return (
    <header className="bg-white shadow-sm border-b border-gray-200 h-16 flex items-center justify-between px-6">
      {/* Left section */}
      <div className="flex items-center space-x-4">
        <button
          onClick={onMenuClick}
          className="lg:hidden p-2 rounded-md text-gray-600 hover:bg-gray-100"
        >
          <Menu className="h-5 w-5" />
        </button>

        {/* Global search */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
          <input
            type="text"
            placeholder="Search orders, customers, products..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 pr-4 py-2 w-80 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
      </div>

      {/* Right section */}
      <div className="flex items-center space-x-4">
        {/* Notifications */}
        <div className="relative">
          <button
            onClick={() => setShowNotifications(!showNotifications)}
            className="relative p-2 text-gray-600 hover:bg-gray-100 rounded-lg"
          >
            <Bell className="h-5 w-5" />
            {unreadCount > 0 && (
              <span className="absolute -top-1 -right-1 h-5 w-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                {unreadCount > 9 ? '9+' : unreadCount}
              </span>
            )}
          </button>
          
          {showNotifications && (
            <NotificationPanel onClose={() => setShowNotifications(false)} />
          )}
        </div>

        {/* User menu */}
        <div className="relative">
          <button
            onClick={() => setShowUserMenu(!showUserMenu)}
            className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100"
          >
            <img
              className="h-8 w-8 rounded-full"
              src={user?.avatar}
              alt={user?.name}
            />
            <div className="text-left">
              <div className="text-sm font-medium text-gray-900">{user?.name}</div>
              <div className="text-xs text-gray-500">{user?.role}</div>
            </div>
            <ChevronDown className="h-4 w-4 text-gray-400" />
          </button>

          {showUserMenu && (
            <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 py-1 z-50">
              <div className="px-4 py-2 text-sm text-gray-700 border-b border-gray-100">
                <div className="font-medium">{user?.name}</div>
                <div className="text-gray-500">{user?.email}</div>
              </div>
              <button
                onClick={() => {
                  logout();
                  setShowUserMenu(false);
                }}
                className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                <LogOut className="mr-3 h-4 w-4" />
                Sign out
              </button>
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

export default TopBar;
PK
     �*7[               src/components/notifications/PK
     �*7[��XЮ
  �
  2   src/components/notifications/NotificationPanel.jsximport React from 'react';
import { X, CheckCircle, Clock, AlertCircle } from 'lucide-react';
import { useNotifications } from '../../context/NotificationContext';

const NotificationPanel = ({ onClose }) => {
  const { notifications, markAsRead } = useNotifications();

  const getIcon = (type) => {
    switch (type) {
      case 'approval':
        return <Clock className="h-5 w-5 text-orange-500" />;
      case 'delivery':
        return <CheckCircle className="h-5 w-5 text-green-500" />;
      default:
        return <AlertCircle className="h-5 w-5 text-blue-500" />;
    }
  };

  return (
    <div className="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
      <div className="flex items-center justify-between p-4 border-b border-gray-200">
        <h3 className="text-lg font-medium text-gray-900">Notifications</h3>
        <button
          onClick={onClose}
          className="p-1 hover:bg-gray-100 rounded"
        >
          <X className="h-5 w-5 text-gray-400" />
        </button>
      </div>

      <div className="max-h-96 overflow-y-auto">
        {notifications.length === 0 ? (
          <div className="p-4 text-center text-gray-500">
            No notifications
          </div>
        ) : (
          <div className="divide-y divide-gray-100">
            {notifications.map((notification) => (
              <div
                key={notification.id}
                className={`p-4 hover:bg-gray-50 cursor-pointer ${
                  !notification.read ? 'bg-blue-50' : ''
                }`}
                onClick={() => markAsRead(notification.id)}
              >
                <div className="flex items-start space-x-3">
                  {getIcon(notification.type)}
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium text-gray-900">
                      {notification.title}
                    </p>
                    <p className="text-sm text-gray-500 mt-1">
                      {notification.message}
                    </p>
                    <p className="text-xs text-gray-400 mt-1">
                      {notification.time}
                    </p>
                  </div>
                  {!notification.read && (
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      <div className="p-4 border-t border-gray-200">
        <button className="text-sm text-blue-600 hover:text-blue-800 font-medium">
          View all notifications
        </button>
      </div>
    </div>
  );
};

export default NotificationPanel;
PK
     �*7[               src/components/ui/PK
     �*7[t=�
  
  !   src/components/ui/StatusBadge.jsximport React from 'react';

const StatusBadge = ({ status, className = '' }) => {
  const getStatusConfig = (status) => {
    const statusLower = status?.toLowerCase();
    
    switch (statusLower) {
      case 'draft':
        return { color: 'bg-gray-100 text-gray-800', label: 'Draft' };
      case 'pending':
        return { color: 'bg-yellow-100 text-yellow-800', label: 'Pending' };
      case 'awaiting approval':
        return { color: 'bg-orange-100 text-orange-800', label: 'Awaiting Approval' };
      case 'approved':
        return { color: 'bg-green-100 text-green-800', label: 'Approved' };
      case 'blocked':
        return { color: 'bg-purple-100 text-purple-800', label: 'Blocked' };
      case 'partial':
        return { color: 'bg-blue-100 text-blue-800', label: 'Partial' };
      case 'delivered':
        return { color: 'bg-teal-100 text-teal-800', label: 'Delivered' };
      case 'closed':
        return { color: 'bg-gray-900 text-white', label: 'Closed' };
      case 'rejected':
        return { color: 'bg-red-100 text-red-800', label: 'Rejected' };
      case 'submitted':
        return { color: 'bg-blue-100 text-blue-800', label: 'Submitted' };
      default:
        return { color: 'bg-gray-100 text-gray-800', label: status || 'Unknown' };
    }
  };

  const config = getStatusConfig(status);

  return (
    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color} ${className}`}>
      {config.label}
    </span>
  );
};

export default StatusBadge;
PK
     �*7[)�/A�$  �$     src/components/ui/DataTable.jsximport React, { useState } from 'react';
import { ChevronDown, ChevronUp, Search, Filter, Download } from 'lucide-react';

const DataTable = ({ 
  columns, 
  data, 
  onRowClick, 
  selectable = false,
  onSelectionChange,
  actions = [],
  searchable = true,
  filterable = true,
  exportable = true,
  pagination = true,
  pageSize = 10
}) => {
  const [selectedRows, setSelectedRows] = useState(new Set());
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [showFilters, setShowFilters] = useState(false);

  // Sort data
  const sortedData = React.useMemo(() => {
    if (!sortConfig.key) return data;
    
    return [...data].sort((a, b) => {
      const aValue = a[sortConfig.key];
      const bValue = b[sortConfig.key];
      
      if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;
      if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;
      return 0;
    });
  }, [data, sortConfig]);

  // Filter data
  const filteredData = React.useMemo(() => {
    if (!searchTerm) return sortedData;
    
    return sortedData.filter(row =>
      Object.values(row).some(value =>
        value?.toString().toLowerCase().includes(searchTerm.toLowerCase())
      )
    );
  }, [sortedData, searchTerm]);

  // Paginate data
  const paginatedData = React.useMemo(() => {
    if (!pagination) return filteredData;
    
    const start = (currentPage - 1) * pageSize;
    return filteredData.slice(start, start + pageSize);
  }, [filteredData, currentPage, pageSize, pagination]);

  const totalPages = Math.ceil(filteredData.length / pageSize);

  const handleSort = (key) => {
    setSortConfig(prev => ({
      key,
      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc'
    }));
  };

  const handleSelectAll = (checked) => {
    if (checked) {
      setSelectedRows(new Set(paginatedData.map(row => row.id)));
    } else {
      setSelectedRows(new Set());
    }
    
    if (onSelectionChange) {
      onSelectionChange(checked ? paginatedData.map(row => row.id) : []);
    }
  };

  const handleSelectRow = (id, checked) => {
    const newSelected = new Set(selectedRows);
    if (checked) {
      newSelected.add(id);
    } else {
      newSelected.delete(id);
    }
    setSelectedRows(newSelected);
    
    if (onSelectionChange) {
      onSelectionChange(Array.from(newSelected));
    }
  };

  return (
    <div className="bg-white rounded-lg shadow">
      {/* Table header with search and actions */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0">
          <div className="flex items-center space-x-3">
            {searchable && (
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-9 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            )}
            
            {filterable && (
              <button
                onClick={() => setShowFilters(!showFilters)}
                className="flex items-center px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
              >
                <Filter className="h-4 w-4 mr-2" />
                Filters
              </button>
            )}
          </div>

          <div className="flex items-center space-x-2">
            {selectedRows.size > 0 && actions.length > 0 && (
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-500">
                  {selectedRows.size} selected
                </span>
                {actions.map((action, index) => (
                  <button
                    key={index}
                    onClick={() => action.onClick(Array.from(selectedRows))}
                    className="flex items-center px-3 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
                  >
                    {action.icon && <action.icon className="h-4 w-4 mr-2" />}
                    {action.label}
                  </button>
                ))}
              </div>
            )}
            
            {exportable && (
              <button className="flex items-center px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50">
                <Download className="h-4 w-4 mr-2" />
                Export
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Table */}
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              {selectable && (
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <input
                    type="checkbox"
                    checked={selectedRows.size === paginatedData.length && paginatedData.length > 0}
                    onChange={(e) => handleSelectAll(e.target.checked)}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                </th>
              )}
              {columns.map((column) => (
                <th
                  key={column.key}
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  <div className="flex items-center space-x-1">
                    <span>{column.label}</span>
                    {column.sortable && (
                      <button
                        onClick={() => handleSort(column.key)}
                        className="p-1 hover:bg-gray-200 rounded"
                      >
                        {sortConfig.key === column.key ? (
                          sortConfig.direction === 'asc' ? (
                            <ChevronUp className="h-4 w-4" />
                          ) : (
                            <ChevronDown className="h-4 w-4" />
                          )
                        ) : (
                          <ChevronDown className="h-4 w-4 text-gray-400" />
                        )}
                      </button>
                    )}
                  </div>
                </th>
              ))}
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {paginatedData.map((row, index) => (
              <tr
                key={row.id || index}
                onClick={() => onRowClick && onRowClick(row)}
                className={`hover:bg-gray-50 ${onRowClick ? 'cursor-pointer' : ''}`}
              >
                {selectable && (
                  <td className="px-6 py-4 whitespace-nowrap">
                    <input
                      type="checkbox"
                      checked={selectedRows.has(row.id)}
                      onChange={(e) => handleSelectRow(row.id, e.target.checked)}
                      onClick={(e) => e.stopPropagation()}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                  </td>
                )}
                {columns.map((column) => (
                  <td key={column.key} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {column.render ? column.render(row[column.key], row) : row[column.key]}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {pagination && totalPages > 1 && (
        <div className="px-6 py-3 border-t border-gray-200 flex items-center justify-between">
          <div className="text-sm text-gray-700">
            Showing {((currentPage - 1) * pageSize) + 1} to {Math.min(currentPage * pageSize, filteredData.length)} of {filteredData.length} results
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
              className="px-3 py-1 border border-gray-300 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
            >
              Previous
            </button>
            <span className="text-sm text-gray-700">
              Page {currentPage} of {totalPages}
            </span>
            <button
              onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
              className="px-3 py-1 border border-gray-300 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
            >
              Next
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default DataTable;
PK
     �*7[               src/components/dashboard/PK
     �*7[Y���  �  &   src/components/dashboard/Dashboard.jsximport React from 'react';
import { useAuth } from '../../context/AuthContext';
import SalesExecutiveDashboard from './SalesExecutiveDashboard';
import SalesManagerDashboard from './SalesManagerDashboard';
import StorekeeperDashboard from './StorekeeperDashboard';

const Dashboard = () => {
  const { user } = useAuth();

  const renderDashboard = () => {
    switch (user?.role) {
      case 'Sales Executive':
        return <SalesExecutiveDashboard />;
      case 'Sales Manager':
        return <SalesManagerDashboard />;
      case 'Storekeeper':
        return <StorekeeperDashboard />;
      default:
        return <div>Invalid role</div>;
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-900">
          Welcome back, {user?.name}!
        </h1>
        <div className="text-sm text-gray-500">
          {new Date().toLocaleDateString('en-US', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })}
        </div>
      </div>
      
      {renderDashboard()}
    </div>
  );
};

export default Dashboard;
PK
     �*7[iM�0�  �  4   src/components/dashboard/SalesExecutiveDashboard.jsximport React from 'react';
import { Link } from 'react-router-dom';
import { 
  MessageSquare, Calculator, FileText, ShoppingCart, 
  TrendingUp, Clock, CheckCircle, AlertCircle,
  Plus, Eye
} from 'lucide-react';
import StatusBadge from '../ui/StatusBadge';

const SalesExecutiveDashboard = () => {
  const stats = [
    {
      name: 'Pending Approvals',
      value: '3',
      icon: Clock,
      color: 'text-orange-600',
      bgColor: 'bg-orange-100',
      href: '/budgets?status=pending'
    },
    {
      name: 'New Enquiries',
      value: '8',
      icon: MessageSquare,
      color: 'text-blue-600',
      bgColor: 'bg-blue-100',
      href: '/enquiries?status=new'
    },
    {
      name: 'Active Quotations',
      value: '12',
      icon: FileText,
      color: 'text-green-600',
      bgColor: 'bg-green-100',
      href: '/quotations?status=active'
    },
    {
      name: 'Sales Orders Today',
      value: '5',
      icon: ShoppingCart,
      color: 'text-purple-600',
      bgColor: 'bg-purple-100',
      href: '/sales-orders?date=today'
    }
  ];

  const quickActions = [
    { name: 'New Enquiry', href: '/enquiries/new', icon: MessageSquare },
    { name: 'Create Budget', href: '/budget/new', icon: Calculator },
    { name: 'Generate Quotation', href: '/quotations/new', icon: FileText },
    { name: 'New Sales Order', href: '/sales-orders/new', icon: ShoppingCart }
  ];

  const recentActivity = [
    {
      id: 1,
      type: 'Budget',
      action: 'submitted for approval',
      item: 'B-2024-001',
      time: '2 hours ago',
      status: 'Pending'
    },
    {
      id: 2,
      type: 'Quotation',
      action: 'sent to customer',
      item: 'Q-2024-015',
      time: '4 hours ago',
      status: 'Sent'
    },
    {
      id: 3,
      type: 'Enquiry',
      action: 'received from',
      item: 'ABC Corp',
      time: '6 hours ago',
      status: 'New'
    },
    {
      id: 4,
      type: 'Sales Order',
      action: 'created',
      item: 'SO-2024-023',
      time: '1 day ago',
      status: 'Ready'
    }
  ];

  const enquiriesByStage = [
    { stage: 'New Enquiry', count: 8, color: 'bg-blue-500' },
    { stage: 'Budget Drafted', count: 5, color: 'bg-yellow-500' },
    { stage: 'Budget Submitted', count: 3, color: 'bg-orange-500' },
    { stage: 'Quotation Generated', count: 12, color: 'bg-green-500' },
    { stage: 'Received Order', count: 7, color: 'bg-purple-500' }
  ];

  return (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <Link
            key={stat.name}
            to={stat.href}
            className="bg-white p-6 rounded-lg shadow hover:shadow-md transition-shadow"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">{stat.name}</p>
                <p className="text-3xl font-bold text-gray-900">{stat.value}</p>
              </div>
              <div className={`p-3 rounded-lg ${stat.bgColor}`}>
                <stat.icon className={`h-6 w-6 ${stat.color}`} />
              </div>
            </div>
          </Link>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Quick Actions */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Quick Actions</h3>
          <div className="space-y-3">
            {quickActions.map((action) => (
              <Link
                key={action.name}
                to={action.href}
                className="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <action.icon className="h-5 w-5 text-blue-600 mr-3" />
                <span className="text-sm font-medium text-gray-900">{action.name}</span>
                <Plus className="h-4 w-4 text-gray-400 ml-auto" />
              </Link>
            ))}
          </div>
        </div>

        {/* Enquiries by Stage */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Enquiries by Stage</h3>
          <div className="space-y-4">
            {enquiriesByStage.map((item) => (
              <div key={item.stage} className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className={`w-3 h-3 rounded-full ${item.color} mr-3`}></div>
                  <span className="text-sm text-gray-700">{item.stage}</span>
                </div>
                <span className="text-sm font-medium text-gray-900">{item.count}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Recent Activity */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Recent Activity</h3>
          <div className="space-y-4">
            {recentActivity.map((activity) => (
              <div key={activity.id} className="flex items-start space-x-3">
                <div className="flex-shrink-0">
                  {activity.type === 'Budget' && <Calculator className="h-5 w-5 text-orange-500" />}
                  {activity.type === 'Quotation' && <FileText className="h-5 w-5 text-green-500" />}
                  {activity.type === 'Enquiry' && <MessageSquare className="h-5 w-5 text-blue-500" />}
                  {activity.type === 'Sales Order' && <ShoppingCart className="h-5 w-5 text-purple-500" />}
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm text-gray-900">
                    <span className="font-medium">{activity.type}</span> {activity.action} <span className="font-medium">{activity.item}</span>
                  </p>
                  <div className="flex items-center justify-between mt-1">
                    <p className="text-xs text-gray-500">{activity.time}</p>
                    <StatusBadge status={activity.status} />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default SalesExecutiveDashboard;
PK
     �*7[��;��  �  2   src/components/dashboard/SalesManagerDashboard.jsximport React from 'react';
import { Link } from 'react-router-dom';
import { 
  CheckCircle, Clock, TrendingUp, DollarSign, 
  Users, Package, AlertTriangle, FileText
} from 'lucide-react';
import StatusBadge from '../ui/StatusBadge';

const SalesManagerDashboard = () => {
  const stats = [
    {
      name: 'Pending Approvals',
      value: '7',
      icon: Clock,
      color: 'text-orange-600',
      bgColor: 'bg-orange-100',
      href: '/approvals'
    },
    {
      name: 'Team Performance',
      value: '92%',
      icon: Users,
      color: 'text-green-600',
      bgColor: 'bg-green-100',
      href: '/team-performance'
    },
    {
      name: 'Monthly Revenue',
      value: '$45.2K',
      icon: DollarSign,
      color: 'text-blue-600',
      bgColor: 'bg-blue-100',
      href: '/revenue'
    },
    {
      name: 'Block Requests',
      value: '3',
      icon: AlertTriangle,
      color: 'text-red-600',
      bgColor: 'bg-red-100',
      href: '/blocking?status=pending'
    }
  ];

  const pendingApprovals = [
    {
      id: 1,
      type: 'Budget',
      item: 'B-2024-001',
      customer: 'ABC Corp',
      amount: '$12,500',
      submittedBy: 'John Smith',
      submittedAt: '2 hours ago',
      priority: 'High'
    },
    {
      id: 2,
      type: 'FPO',
      item: 'F-2024-003',
      vendor: 'XYZ Supplies',
      amount: '$8,750',
      submittedBy: 'Jane Doe',
      submittedAt: '4 hours ago',
      priority: 'Medium'
    },
    {
      id: 3,
      type: 'Block Request',
      item: 'SO-2024-015',
      customer: 'DEF Ltd',
      quantity: '50 units',
      submittedBy: 'Mike Johnson',
      submittedAt: '6 hours ago',
      priority: 'High'
    }
  ];

  const teamActivity = [
    {
      name: 'John Smith',
      avatar: 'https://ui-avatars.com/api/?name=John+Smith&background=3b82f6&color=fff',
      action: 'Submitted budget B-2024-001',
      time: '2 hours ago',
      status: 'pending'
    },
    {
      name: 'Jane Doe',
      avatar: 'https://ui-avatars.com/api/?name=Jane+Doe&background=10b981&color=fff',
      action: 'Created quotation Q-2024-018',
      time: '3 hours ago',
      status: 'completed'
    },
    {
      name: 'Mike Johnson',
      avatar: 'https://ui-avatars.com/api/?name=Mike+Johnson&background=f59e0b&color=fff',
      action: 'Requested inventory block',
      time: '5 hours ago',
      status: 'pending'
    }
  ];

  return (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <Link
            key={stat.name}
            to={stat.href}
            className="bg-white p-6 rounded-lg shadow hover:shadow-md transition-shadow"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">{stat.name}</p>
                <p className="text-3xl font-bold text-gray-900">{stat.value}</p>
              </div>
              <div className={`p-3 rounded-lg ${stat.bgColor}`}>
                <stat.icon className={`h-6 w-6 ${stat.color}`} />
              </div>
            </div>
          </Link>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Pending Approvals */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium text-gray-900">Pending Approvals</h3>
              <Link
                to="/approvals"
                className="text-sm text-blue-600 hover:text-blue-800 font-medium"
              >
                View all
              </Link>
            </div>
          </div>
          <div className="divide-y divide-gray-200">
            {pendingApprovals.map((approval) => (
              <div key={approval.id} className="p-6 hover:bg-gray-50">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-medium text-gray-900">
                        {approval.type} {approval.item}
                      </span>
                      <StatusBadge 
                        status={approval.priority === 'High' ? 'awaiting approval' : 'pending'} 
                      />
                    </div>
                    <p className="text-sm text-gray-600 mt-1">
                      {approval.customer || approval.vendor} • {approval.amount || approval.quantity}
                    </p>
                    <p className="text-xs text-gray-500 mt-1">
                      By {approval.submittedBy} • {approval.submittedAt}
                    </p>
                  </div>
                  <div className="flex space-x-2">
                    <button className="px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700">
                      Approve
                    </button>
                    <button className="px-3 py-1 text-sm border border-gray-300 text-gray-700 rounded hover:bg-gray-50">
                      Review
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Team Activity */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">Team Activity</h3>
          </div>
          <div className="p-6">
            <div className="space-y-4">
              {teamActivity.map((activity, index) => (
                <div key={index} className="flex items-center space-x-3">
                  <img
                    className="h-8 w-8 rounded-full"
                    src={activity.avatar}
                    alt={activity.name}
                  />
                  <div className="flex-1 min-w-0">
                    <p className="text-sm text-gray-900">
                      <span className="font-medium">{activity.name}</span> {activity.action}
                    </p>
                    <p className="text-xs text-gray-500">{activity.time}</p>
                  </div>
                  <div className="flex-shrink-0">
                    {activity.status === 'pending' ? (
                      <Clock className="h-4 w-4 text-orange-500" />
                    ) : (
                      <CheckCircle className="h-4 w-4 text-green-500" />
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SalesManagerDashboard;
PK
     �*7[��`�  �  1   src/components/dashboard/StorekeeperDashboard.jsximport React from 'react';
import { Link } from 'react-router-dom';
import { 
  Package, Truck, ArrowDownCircle, ArrowUpCircle, 
  AlertTriangle, CheckCircle, Clock, Archive
} from 'lucide-react';
import StatusBadge from '../ui/StatusBadge';

const StorekeeperDashboard = () => {
  const stats = [
    {
      name: 'FPOs in Transit',
      value: '4',
      icon: Truck,
      color: 'text-blue-600',
      bgColor: 'bg-blue-100',
      href: '/fpo?status=shipped'
    },
    {
      name: 'Pending Receipts',
      value: '6',
      icon: ArrowDownCircle,
      color: 'text-orange-600',
      bgColor: 'bg-orange-100',
      href: '/inward?status=pending'
    },
    {
      name: 'Ready to Issue',
      value: '12',
      icon: ArrowUpCircle,
      color: 'text-green-600',
      bgColor: 'bg-green-100',
      href: '/issuance?status=ready'
    },
    {
      name: 'Low Stock Items',
      value: '8',
      icon: AlertTriangle,
      color: 'text-red-600',
      bgColor: 'bg-red-100',
      href: '/inventory?status=low'
    }
  ];

  const inventorySnapshot = [
    { category: 'Available', count: 1245, color: 'bg-green-500' },
    { category: 'Blocked', count: 56, color: 'bg-purple-500' },
    { category: 'Reserved', count: 89, color: 'bg-blue-500' },
    { category: 'Low Stock', count: 8, color: 'bg-red-500' }
  ];

  const recentDeliveries = [
    {
      id: 1,
      fpo: 'F-2024-003',
      vendor: 'ABC Supplies',
      items: 'Electronic Components',
      received: '45/50 units',
      status: 'Partial',
      time: '2 hours ago'
    },
    {
      id: 2,
      fpo: 'F-2024-001',
      vendor: 'XYZ Parts',
      items: 'Mechanical Parts',
      received: '100/100 units',
      status: 'Complete',
      time: '1 day ago'
    },
    {
      id: 3,
      fpo: 'F-2024-005',
      vendor: 'DEF Materials',
      items: 'Raw Materials',
      received: '75/80 units',
      status: 'Partial',
      time: '2 days ago'
    }
  ];

  const pendingIssuances = [
    {
      id: 1,
      so: 'SO-2024-015',
      customer: 'Tech Corp',
      items: 'Laptop Components',
      quantity: '25 units',
      priority: 'High',
      dueDate: 'Today'
    },
    {
      id: 2,
      so: 'SO-2024-018',
      customer: 'Industrial Ltd',
      items: 'Motor Parts',
      quantity: '10 units',
      priority: 'Medium',
      dueDate: 'Tomorrow'
    },
    {
      id: 3,
      so: 'SO-2024-012',
      customer: 'Manufacturing Co',
      items: 'Steel Components',
      quantity: '15 units',
      priority: 'Low',
      dueDate: 'Next Week'
    }
  ];

  return (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <Link
            key={stat.name}
            to={stat.href}
            className="bg-white p-6 rounded-lg shadow hover:shadow-md transition-shadow"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">{stat.name}</p>
                <p className="text-3xl font-bold text-gray-900">{stat.value}</p>
              </div>
              <div className={`p-3 rounded-lg ${stat.bgColor}`}>
                <stat.icon className={`h-6 w-6 ${stat.color}`} />
              </div>
            </div>
          </Link>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Inventory Snapshot */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Inventory Snapshot</h3>
          <div className="space-y-4">
            {inventorySnapshot.map((item) => (
              <div key={item.category} className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className={`w-3 h-3 rounded-full ${item.color} mr-3`}></div>
                  <span className="text-sm text-gray-700">{item.category}</span>
                </div>
                <span className="text-sm font-medium text-gray-900">{item.count}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Recent Deliveries */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">Recent Deliveries</h3>
          </div>
          <div className="divide-y divide-gray-200">
            {recentDeliveries.map((delivery) => (
              <div key={delivery.id} className="p-4">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-medium text-gray-900">
                        {delivery.fpo}
                      </span>
                      <StatusBadge status={delivery.status} />
                    </div>
                    <p className="text-sm text-gray-600 mt-1">{delivery.vendor}</p>
                    <p className="text-sm text-gray-600">{delivery.items}</p>
                    <p className="text-xs text-gray-500 mt-1">
                      {delivery.received} • {delivery.time}
                    </p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Pending Issuances */}
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">Pending Issuances</h3>
          </div>
          <div className="divide-y divide-gray-200">
            {pendingIssuances.map((issuance) => (
              <div key={issuance.id} className="p-4">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-medium text-gray-900">
                        {issuance.so}
                      </span>
                      <StatusBadge 
                        status={issuance.priority === 'High' ? 'awaiting approval' : 'pending'} 
                      />
                    </div>
                    <p className="text-sm text-gray-600 mt-1">{issuance.customer}</p>
                    <p className="text-sm text-gray-600">{issuance.items}</p>
                    <p className="text-xs text-gray-500 mt-1">
                      {issuance.quantity} • Due: {issuance.dueDate}
                    </p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default StorekeeperDashboard;
PK
     �*7[               src/components/enquiry/PK
     �*7[ߍ�k    &   src/components/enquiry/EnquiryList.jsximport React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Plus, Eye, Edit, History } from 'lucide-react';
import DataTable from '../ui/DataTable';
import StatusBadge from '../ui/StatusBadge';
import { faker } from '@faker-js/faker';

const EnquiryList = () => {
  const navigate = useNavigate();
  
  // Generate mock data
  const enquiries = Array.from({ length: 25 }, (_, index) => ({
    id: `ENQ-2024-${String(index + 1).padStart(3, '0')}`,
    customer: faker.company.name(),
    productSummary: `${faker.commerce.productName()} (${faker.number.int({ min: 1, max: 10 })} items)`,
    assignedManager: faker.person.fullName(),
    createdDate: faker.date.recent({ days: 30 }).toLocaleDateString(),
    currentStage: faker.helpers.arrayElement([
      'New Enquiry', 'Budget Drafted', 'Budget Submitted', 'Budget Approved',
      'Quotation Generated', 'Quotation Revised', 'Received Order', 'Sales Order Generated', 'Closed'
    ]),
    nextAction: faker.helpers.arrayElement([
      'Create Budget', 'Submit for Approval', 'Generate Quote', 'Follow up'
    ])
  }));

  const columns = [
    {
      key: 'id',
      label: 'Enquiry ID',
      sortable: true,
      render: (value, row) => (
        <button
          onClick={() => navigate(`/enquiries/${row.id}`)}
          className="text-blue-600 hover:text-blue-800 font-medium"
        >
          {value}
        </button>
      )
    },
    {
      key: 'customer',
      label: 'Customer',
      sortable: true
    },
    {
      key: 'productSummary',
      label: 'Product Summary',
      render: (value) => (
        <div className="max-w-xs">
          <span title={value} className="truncate block">
            {value}
          </span>
        </div>
      )
    },
    {
      key: 'assignedManager',
      label: 'Assigned Manager',
      sortable: true
    },
    {
      key: 'createdDate',
      label: 'Created Date',
      sortable: true
    },
    {
      key: 'currentStage',
      label: 'Current Stage',
      render: (value) => <StatusBadge status={value} />
    },
    {
      key: 'nextAction',
      label: 'Next Action',
      render: (value) => (
        <span className="text-sm text-gray-600" title={value}>
          {value}
        </span>
      )
    },
    {
      key: 'actions',
      label: 'Actions',
      render: (_, row) => (
        <div className="flex space-x-2">
          <button
            onClick={() => navigate(`/enquiries/${row.id}`)}
            className="p-1 text-blue-600 hover:text-blue-800"
            title="View"
          >
            <Eye className="h-4 w-4" />
          </button>
          <button
            onClick={() => navigate(`/enquiries/${row.id}/edit`)}
            className="p-1 text-gray-600 hover:text-gray-800"
            title="Edit"
          >
            <Edit className="h-4 w-4" />
          </button>
          <button
            onClick={() => navigate(`/enquiries/${row.id}/history`)}
            className="p-1 text-purple-600 hover:text-purple-800"
            title="History"
          >
            <History className="h-4 w-4" />
          </button>
        </div>
      )
    }
  ];

  const handleRowClick = (row) => {
    navigate(`/enquiries/${row.id}`);
  };

  const handleCreateNew = () => {
    navigate('/enquiries/new');
  };

  const bulkActions = [
    {
      label: 'Export Selected',
      icon: Eye,
      onClick: (selectedIds) => {
        console.log('Exporting:', selectedIds);
      }
    }
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Enquiries</h1>
          <p className="text-gray-600">Manage customer enquiries and track progress</p>
        </div>
        <button
          onClick={handleCreateNew}
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          <Plus className="h-4 w-4 mr-2" />
          New Enquiry
        </button>
      </div>

      <DataTable
        columns={columns}
        data={enquiries}
        onRowClick={handleRowClick}
        selectable={true}
        actions={bulkActions}
        searchable={true}
        filterable={true}
        exportable={true}
      />
    </div>
  );
};

export default EnquiryList;
PK
     �*7[Ƚ�Q�2  �2  (   src/components/enquiry/EnquiryDetail.jsximport React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  ArrowLeft, Edit, Download, Plus, User, 
  Building, Phone, Mail, MapPin, Clock,
  CheckCircle, FileText, Package
} from 'lucide-react';
import StatusBadge from '../ui/StatusBadge';
import TimelinePanel from '../ui/TimelinePanel';

const EnquiryDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  
  // Mock data
  const enquiry = {
    id: id || 'ENQ-2024-001',
    customer: 'Tech Solutions Inc.',
    currentStage: 'Budget Submitted',
    createdDate: '2024-01-15',
    lastModified: '2024-01-18',
    assignedManager: {
      id: 1,
      name: 'Sarah Johnson',
      email: 'sarah.johnson@company.com',
      phone: '+1 (555) 123-4567',
      avatar: 'https://ui-avatars.com/api/?name=Sarah+Johnson&background=3b82f6&color=fff'
    },
    customer_details: {
      name: 'Tech Solutions Inc.',
      contact_person: 'John Anderson',
      email: 'john.anderson@techsolutions.com',
      phone: '+1 (555) 987-6543',
      address: '123 Business Park, Tech City, TC 12345'
    },
    products: [
      {
        id: 1,
        code: 'COMP-001',
        name: 'High-Performance Processor',
        requested_qty: 50,
        unit: 'pieces',
        description: 'Latest generation processor for server applications'
      },
      {
        id: 2,
        code: 'MEM-002',
        name: 'DDR5 Memory Module',
        requested_qty: 100,
        unit: 'pieces',
        description: '32GB DDR5 memory modules'
      },
      {
        id: 3,
        code: 'STO-003',
        name: 'NVMe SSD Drive',
        requested_qty: 25,
        unit: 'pieces',
        description: '1TB NVMe SSD for high-speed storage'
      }
    ],
    description: 'Customer requires components for building high-performance server systems. Timeline is critical due to upcoming project deadline.',
    relatedRecords: [
      { type: 'Budget', id: 'B-2024-001', status: 'Submitted' },
      { type: 'Quotation', id: 'Q-2024-005', status: 'Draft' }
    ]
  };

  const timeline = [
    {
      id: 1,
      type: 'created',
      title: 'Enquiry Created',
      description: 'Initial enquiry received from customer',
      user: 'John Smith',
      timestamp: '2024-01-15 09:30 AM',
      icon: Plus
    },
    {
      id: 2,
      type: 'assigned',
      title: 'Assigned to Manager',
      description: 'Enquiry assigned to Sarah Johnson',
      user: 'System',
      timestamp: '2024-01-15 10:15 AM',
      icon: User
    },
    {
      id: 3,
      type: 'budget_created',
      title: 'Budget Created',
      description: 'Budget B-2024-001 created and linked',
      user: 'John Smith',
      timestamp: '2024-01-16 02:45 PM',
      icon: FileText
    },
    {
      id: 4,
      type: 'budget_submitted',
      title: 'Budget Submitted',
      description: 'Budget submitted for manager approval',
      user: 'John Smith',
      timestamp: '2024-01-18 11:20 AM',
      icon: CheckCircle
    }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <button
            onClick={() => navigate('/enquiries')}
            className="p-2 hover:bg-gray-100 rounded-lg"
          >
            <ArrowLeft className="h-5 w-5" />
          </button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{enquiry.id}</h1>
            <p className="text-gray-600">{enquiry.customer}</p>
          </div>
          <StatusBadge status={enquiry.currentStage} />
        </div>
        
        <div className="flex items-center space-x-3">
          <button
            onClick={() => navigate('/budget/new', { state: { enquiryId: enquiry.id } })}
            className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            <Plus className="h-4 w-4 mr-2" />
            Create Budget
          </button>
          <button
            onClick={() => navigate('/quotations/new', { state: { enquiryId: enquiry.id } })}
            className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
          >
            <FileText className="h-4 w-4 mr-2" />
            Create Quote
          </button>
          <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
            <Download className="h-4 w-4 mr-2" />
            Download PDF
          </button>
          <button
            onClick={() => navigate(`/enquiries/${enquiry.id}/edit`)}
            className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
          >
            <Edit className="h-4 w-4 mr-2" />
            Edit
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Main Content */}
        <div className="lg:col-span-3 space-y-6">
          {/* Customer Details */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Customer Details</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-3">
                <div className="flex items-center space-x-3">
                  <Building className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Company</p>
                    <p className="font-medium">{enquiry.customer_details.name}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <User className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Contact Person</p>
                    <p className="font-medium">{enquiry.customer_details.contact_person}</p>
                  </div>
                </div>
              </div>
              <div className="space-y-3">
                <div className="flex items-center space-x-3">
                  <Mail className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{enquiry.customer_details.email}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <Phone className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="font-medium">{enquiry.customer_details.phone}</p>
                  </div>
                </div>
              </div>
            </div>
            <div className="mt-4">
              <div className="flex items-start space-x-3">
                <MapPin className="h-5 w-5 text-gray-400 mt-0.5" />
                <div>
                  <p className="text-sm text-gray-500">Address</p>
                  <p className="font-medium">{enquiry.customer_details.address}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Product List */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Requested Products</h2>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Product Code
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Product Name
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Quantity
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Unit
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Description
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {enquiry.products.map((product) => (
                    <tr key={product.id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        {product.code}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {product.name}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {product.requested_qty}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {product.unit}
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-900">
                        {product.description}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Customer Description */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Customer Requirements</h2>
            <p className="text-gray-700">{enquiry.description}</p>
          </div>

          {/* Assigned Manager */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Assigned Sales Manager</h2>
            <div className="flex items-center space-x-4">
              <img
                className="h-12 w-12 rounded-full"
                src={enquiry.assignedManager.avatar}
                alt={enquiry.assignedManager.name}
              />
              <div className="flex-1">
                <h3 className="text-lg font-medium text-gray-900">{enquiry.assignedManager.name}</h3>
                <div className="flex items-center space-x-4 text-sm text-gray-500">
                  <span>{enquiry.assignedManager.email}</span>
                  <span>{enquiry.assignedManager.phone}</span>
                </div>
              </div>
              <button className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
                Change Manager
              </button>
            </div>
          </div>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Audit Information */}
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Audit Information</h3>
            <div className="space-y-3">
              <div>
                <p className="text-sm text-gray-500">Created by</p>
                <p className="text-sm font-medium">John Smith</p>
                <p className="text-xs text-gray-400">{enquiry.createdDate}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">Last modified by</p>
                <p className="text-sm font-medium">John Smith</p>
                <p className="text-xs text-gray-400">{enquiry.lastModified}</p>
              </div>
              <div>
                <p className="text-sm text-gray-500">Current status</p>
                <StatusBadge status={enquiry.currentStage} />
              </div>
            </div>
          </div>

          {/* Related Records */}
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Related Records</h3>
            <div className="space-y-3">
              {enquiry.relatedRecords.map((record, index) => (
                <div key={index} className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-900">{record.type}</p>
                    <p className="text-sm text-blue-600 hover:text-blue-800 cursor-pointer">
                      {record.id}
                    </p>
                  </div>
                  <StatusBadge status={record.status} />
                </div>
              ))}
            </div>
          </div>

          {/* Timeline */}
          <TimelinePanel title="Activity Timeline" timeline={timeline} />
        </div>
      </div>
    </div>
  );
};

export default EnquiryDetail;
PK
     �*7[�;@�    #   src/components/ui/TimelinePanel.jsximport React from 'react';

const TimelinePanel = ({ title, timeline }) => {
  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h3 className="text-lg font-medium text-gray-900 mb-4">{title}</h3>
      <div className="flow-root">
        <ul className="-mb-8">
          {timeline.map((event, eventIdx) => (
            <li key={event.id}>
              <div className="relative pb-8">
                {eventIdx !== timeline.length - 1 ? (
                  <span
                    className="absolute left-5 top-5 -ml-px h-full w-0.5 bg-gray-200"
                    aria-hidden="true"
                  />
                ) : null}
                <div className="relative flex items-start space-x-3">
                  <div className="relative">
                    <div className="h-10 w-10 bg-blue-500 rounded-full flex items-center justify-center">
                      <event.icon className="h-5 w-5 text-white" />
                    </div>
                  </div>
                  <div className="min-w-0 flex-1">
                    <div>
                      <div className="text-sm">
                        <span className="font-medium text-gray-900">{event.title}</span>
                      </div>
                      <p className="mt-0.5 text-sm text-gray-500">{event.timestamp}</p>
                    </div>
                    <div className="mt-2 text-sm text-gray-700">
                      <p>{event.description}</p>
                      {event.user && (
                        <p className="text-xs text-gray-500 mt-1">by {event.user}</p>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default TimelinePanel;
PK
     �*7[               src/components/budget/PK
     �*7[7�ʶ�F  �F  *   src/components/budget/BudgetCreateEdit.jsximport React, { useState } from 'react';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
import { 
  ArrowLeft, Plus, Trash2, Upload, Download, 
  Save, Send, Calculator, DollarSign, FileText
} from 'lucide-react';
import StatusBadge from '../ui/StatusBadge';
import { useAuth } from '../../context/AuthContext';

const BudgetCreateEdit = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const location = useLocation();
  const { user } = useAuth();
  const enquiryId = location.state?.enquiryId;
  
  const isEdit = !!id;
  const isManager = user?.role === 'Sales Manager';
  
  const [budget, setBudget] = useState({
    id: id || 'DRAFT',
    enquiryId: enquiryId || 'ENQ-2024-001',
    status: isEdit ? 'Submitted' : 'Draft',
    lineItems: [
      {
        id: 1,
        product: 'High-Performance Processor',
        productCode: 'COMP-001',
        vendorPrice: 450.00,
        currency: 'USD',
        conversionRate: 1.0,
        finalCost: 450.00,
        profitPercent: isManager ? 15 : null,
        sellingPrice: isManager ? 517.50 : null
      },
      {
        id: 2,
        product: 'DDR5 Memory Module',
        productCode: 'MEM-002',
        vendorPrice: 120.00,
        currency: 'USD',
        conversionRate: 1.0,
        finalCost: 120.00,
        profitPercent: isManager ? 20 : null,
        sellingPrice: isManager ? 144.00 : null
      }
    ],
    termsConditions: [
      {
        id: 1,
        title: 'Payment Terms',
        content: '30% advance, 70% on delivery'
      },
      {
        id: 2,
        title: 'Delivery Terms',
        content: 'FOB shipping point, delivery within 15 business days'
      }
    ],
    notes: 'Special pricing negotiated due to bulk order quantity.',
    attachments: []
  });

  const [showApprovalModal, setShowApprovalModal] = useState(false);
  const [approvalComment, setApprovalComment] = useState('');

  const currencies = ['USD', 'EUR', 'GBP', 'INR'];

  const calculateSellingPrice = (cost, profit) => {
    if (!cost || !profit) return 0;
    return cost * (1 + profit / 100);
  };

  const updateLineItem = (id, field, value) => {
    setBudget(prev => ({
      ...prev,
      lineItems: prev.lineItems.map(item => {
        if (item.id === id) {
          const updated = { ...item, [field]: value };
          
          if (field === 'vendorPrice' || field === 'conversionRate') {
            updated.finalCost = (updated.vendorPrice || 0) * (updated.conversionRate || 1);
          }
          
          if (field === 'profitPercent' && isManager) {
            updated.sellingPrice = calculateSellingPrice(updated.finalCost, value);
          }
          
          return updated;
        }
        return item;
      })
    }));
  };

  const addLineItem = () => {
    const newItem = {
      id: Date.now(),
      product: '',
      productCode: '',
      vendorPrice: 0,
      currency: 'USD',
      conversionRate: 1.0,
      finalCost: 0,
      profitPercent: isManager ? 0 : null,
      sellingPrice: isManager ? 0 : null
    };
    setBudget(prev => ({
      ...prev,
      lineItems: [...prev.lineItems, newItem]
    }));
  };

  const removeLineItem = (id) => {
    setBudget(prev => ({
      ...prev,
      lineItems: prev.lineItems.filter(item => item.id !== id)
    }));
  };

  const addTermsCondition = () => {
    const newTerm = {
      id: Date.now(),
      title: '',
      content: ''
    };
    setBudget(prev => ({
      ...prev,
      termsConditions: [...prev.termsConditions, newTerm]
    }));
  };

  const updateTermsCondition = (id, field, value) => {
    setBudget(prev => ({
      ...prev,
      termsConditions: prev.termsConditions.map(term =>
        term.id === id ? { ...term, [field]: value } : term
      )
    }));
  };

  const removeTermsCondition = (id) => {
    setBudget(prev => ({
      ...prev,
      termsConditions: prev.termsConditions.filter(term => term.id !== id)
    }));
  };

  const handleApprove = () => {
    setBudget(prev => ({ ...prev, status: 'Approved' }));
    setShowApprovalModal(false);
    alert(`Budget approved successfully. ${approvalComment ? 'Comment: ' + approvalComment : ''}`);
  };

  const handleReject = () => {
    setBudget(prev => ({ ...prev, status: 'Rejected' }));
    setShowApprovalModal(false);
    alert(`Budget rejected. Reason: ${approvalComment}`);
  };

  const saveDraft = () => {
    setBudget(prev => ({ ...prev, status: 'Draft' }));
    alert('Budget saved as draft');
  };

  const submitForApproval = () => {
    setBudget(prev => ({ ...prev, status: 'Submitted' }));
    alert('Budget submitted for approval');
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <button
            onClick={() => navigate(-1)}
            className="p-2 hover:bg-gray-100 rounded-lg"
          >
            <ArrowLeft className="h-5 w-5" />
          </button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              {isEdit ? `Budget ${budget.id}` : 'Create New Budget'}
            </h1>
            <p className="text-gray-600">
              {budget.enquiryId && `Linked to Enquiry: ${budget.enquiryId}`}
            </p>
          </div>
          <StatusBadge status={budget.status} />
        </div>

        <div className="flex items-center space-x-3">
          {isManager && budget.status === 'Submitted' && (
            <button
              onClick={() => setShowApprovalModal(true)}
              className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
            >
              <Calculator className="h-4 w-4 mr-2" />
              Review & Approve
            </button>
          )}

          {budget.status === 'Approved' && (
            <button
              onClick={() => navigate('/quotations/new', { state: { budgetId: budget.id } })}
              className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
            >
              <FileText className="h-4 w-4 mr-2" />
              Generate Quotation
            </button>
          )}
          
          {!isManager && budget.status !== 'Approved' && budget.status !== 'Submitted' && (
            <>
              <button
                onClick={saveDraft}
                className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                <Save className="h-4 w-4 mr-2" />
                Save Draft
              </button>
              
              {budget.status === 'Draft' && (
                <button
                  onClick={submitForApproval}
                  className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  <Send className="h-4 w-4 mr-2" />
                  Submit for Approval
                </button>
              )}
            </>
          )}

          <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
            <Download className="h-4 w-4 mr-2" />
            Download PDF
          </button>
        </div>
      </div>

      {/* Line Items */}
      <div className="bg-white rounded-lg shadow">
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-medium text-gray-900">Line Items</h2>
            <button
              onClick={addLineItem}
              className="flex items-center px-3 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Product
            </button>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Product</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Vendor Price</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Currency</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Conv. Rate</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Final Cost</th>
                {isManager && (
                  <>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Profit %</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Selling Price</th>
                  </>
                )}
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {budget.lineItems.map((item) => (
                <tr key={item.id}>
                  <td className="px-6 py-4">
                    <div className="space-y-2">
                      <input
                        type="text"
                        value={item.product}
                        onChange={(e) => updateLineItem(item.id, 'product', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                        placeholder="Product name"
                      />
                      <input
                        type="text"
                        value={item.productCode}
                        onChange={(e) => updateLineItem(item.id, 'productCode', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                        placeholder="Product code"
                      />
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <input
                      type="number"
                      value={item.vendorPrice}
                      onChange={(e) => updateLineItem(item.id, 'vendorPrice', parseFloat(e.target.value) || 0)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                      step="0.01"
                    />
                  </td>
                  <td className="px-6 py-4">
                    <select
                      value={item.currency}
                      onChange={(e) => updateLineItem(item.id, 'currency', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                    >
                      {currencies.map(currency => (
                        <option key={currency} value={currency}>{currency}</option>
                      ))}
                    </select>
                  </td>
                  <td className="px-6 py-4">
                    <input
                      type="number"
                      value={item.conversionRate}
                      onChange={(e) => updateLineItem(item.id, 'conversionRate', parseFloat(e.target.value) || 1)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                      step="0.0001"
                    />
                  </td>
                  <td className="px-6 py-4">
                    <div className="px-3 py-2 bg-gray-50 rounded-md text-sm font-medium">
                      ${item.finalCost.toFixed(2)}
                    </div>
                  </td>
                  {isManager && (
                    <>
                      <td className="px-6 py-4">
                        <input
                          type="number"
                          value={item.profitPercent || ''}
                          onChange={(e) => updateLineItem(item.id, 'profitPercent', parseFloat(e.target.value) || 0)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                          step="0.1"
                          placeholder="0"
                        />
                      </td>
                      <td className="px-6 py-4">
                        <div className="px-3 py-2 bg-green-50 rounded-md text-sm font-medium text-green-700">
                          ${(item.sellingPrice || 0).toFixed(2)}
                        </div>
                      </td>
                    </>
                  )}
                  <td className="px-6 py-4">
                    <button
                      onClick={() => removeLineItem(item.id)}
                      className="p-2 text-red-600 hover:text-red-800"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Terms & Conditions */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-medium text-gray-900">Terms & Conditions</h2>
          <button
            onClick={addTermsCondition}
            className="flex items-center px-3 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            <Plus className="h-4 w-4 mr-2" />
            Add Term
          </button>
        </div>

        <div className="space-y-4">
          {budget.termsConditions.map((term) => (
            <div key={term.id} className="border border-gray-200 rounded-lg p-4">
              <div className="flex items-center justify-between mb-2">
                <input
                  type="text"
                  value={term.title}
                  onChange={(e) => updateTermsCondition(term.id, 'title', e.target.value)}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md text-sm font-medium"
                  placeholder="Term title"
                />
                <button
                  onClick={() => removeTermsCondition(term.id)}
                  className="ml-2 p-2 text-red-600 hover:text-red-800"
                >
                  <Trash2 className="h-4 w-4" />
                </button>
              </div>
              <textarea
                value={term.content}
                onChange={(e) => updateTermsCondition(term.id, 'content', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm"
                rows="3"
                placeholder="Term content"
              />
            </div>
          ))}
        </div>
      </div>

      {/* Notes */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-medium text-gray-900 mb-4">Notes</h2>
        <textarea
          value={budget.notes}
          onChange={(e) => setBudget(prev => ({ ...prev, notes: e.target.value }))}
          className="w-full px-3 py-2 border border-gray-300 rounded-md"
          rows="4"
          placeholder="Additional notes..."
        />
      </div>

      {/* Attachments */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-medium text-gray-900 mb-4">Attachments</h2>
        <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
          <Upload className="mx-auto h-12 w-12 text-gray-400" />
          <div className="mt-4">
            <label htmlFor="file-upload" className="cursor-pointer">
              <span className="mt-2 block text-sm font-medium text-gray-900">
                Upload vendor quotes or supporting documents
              </span>
              <span className="block text-xs text-gray-500 mt-1">
                PNG, JPG, PDF up to 25MB
              </span>
              <input id="file-upload" name="file-upload" type="file" className="sr-only" multiple />
            </label>
          </div>
        </div>
      </div>

      {/* Approval Modal */}
      {showApprovalModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Budget Approval</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Comment (required for rejection)
                </label>
                <textarea
                  value={approvalComment}
                  onChange={(e) => setApprovalComment(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  rows="3"
                  placeholder="Enter your comment..."
                />
              </div>
            </div>

            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setShowApprovalModal(false)}
                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={handleReject}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
                disabled={!approvalComment.trim()}
              >
                Reject
              </button>
              <button
                onClick={handleApprove}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
              >
                Approve
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BudgetCreateEdit;
PK
     �*7[               src/components/quotation/PK
     �*7[ޠ�e6%  6%  0   src/components/quotation/QuotationCreateEdit.jsximport React, { useState } from 'react';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
import { 
  ArrowLeft, Plus, Trash2, Download, 
  Save, Send, FileText, GitBranch, Clock
} from 'lucide-react';
import StatusBadge from '../ui/StatusBadge';
import { useAuth } from '../../context/AuthContext';
import TimelinePanel from '../ui/TimelinePanel';

const QuotationCreateEdit = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const location = useLocation();
  const { user } = useAuth();
  const budgetId = location.state?.budgetId;

  const isEdit = !!id;
  const isManager = user?.role === 'Sales Manager';

  const [quotation, setQuotation] = useState({
    id: id || 'DRAFT',
    budgetId: budgetId || 'B-2024-001',
    status: isEdit ? 'Sent' : 'Draft',
    version: 1,
    lineItems: [
      {
        id: 1,
        product: 'High-Performance Processor',
        productCode: 'COMP-001',
        quantity: 50,
        unitPrice: 517.50,
        total: 25875.00,
        customerDescription: 'Processor for server build project X.'
      },
      {
        id: 2,
        product: 'DDR5 Memory Module',
        productCode: 'MEM-002',
        quantity: 100,
        unitPrice: 144.00,
        total: 14400.00,
        customerDescription: '32GB DDR5 RAM modules.'
      }
    ],
    termsConditions: [
      { id: 1, title: 'Payment Terms', content: '30% advance, 70% on delivery' },
      { id: 2, title: 'Validity', content: 'This quotation is valid for 30 days.' }
    ],
    notes: 'Please refer to the attached technical specification sheet.'
  });

  const [versionHistory, setVersionHistory] = useState([
    { version: 1, date: '2024-02-10', user: 'John Smith', status: 'Sent' }
  ]);

  const updateLineItem = (id, field, value) => {
    setQuotation(prev => ({
      ...prev,
      lineItems: prev.lineItems.map(item => {
        if (item.id === id) {
          const updated = { ...item, [field]: value };
          if (field === 'quantity' || field === 'unitPrice') {
            updated.total = (updated.quantity || 0) * (updated.unitPrice || 0);
          }
          return updated;
        }
        return item;
      })
    }));
  };

  const createRevision = () => {
    const newVersion = quotation.version + 1;
    setQuotation(prev => ({
      ...prev,
      version: newVersion,
      status: 'Revised'
    }));
    setVersionHistory(prev => [
      ...prev,
      { version: newVersion, date: new Date().toLocaleDateString(), user: user.name, status: 'Revised' }
    ]);
    alert(`Revision v${newVersion} created. Previous version is saved.`);
  };

  const totalValue = quotation.lineItems.reduce((acc, item) => acc + item.total, 0);

  const timeline = [
    { id: 1, title: 'Quotation Generated', description: 'Generated from Budget B-2024-001', user: 'John Smith', timestamp: '2024-02-10 10:00 AM', icon: Plus },
    { id: 2, title: 'Sent to Customer', description: 'Quotation emailed to customer', user: 'John Smith', timestamp: '2024-02-10 11:30 AM', icon: Send },
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <button onClick={() => navigate(-1)} className="p-2 hover:bg-gray-100 rounded-lg"><ArrowLeft className="h-5 w-5" /></button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{isEdit ? `Quotation ${quotation.id}` : 'Create New Quotation'} (v{quotation.version})</h1>
            <p className="text-gray-600">Linked to Budget: {quotation.budgetId}</p>
          </div>
          <StatusBadge status={quotation.status} />
        </div>
        <div className="flex items-center space-x-3">
          <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"><Save className="h-4 w-4 mr-2" />Save Draft</button>
          <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"><Send className="h-4 w-4 mr-2" />Send to Customer</button>
          <button onClick={createRevision} className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"><GitBranch className="h-4 w-4 mr-2" />Create Revision</button>
          <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"><Download className="h-4 w-4 mr-2" />Download PDF</button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <div className="lg:col-span-3 space-y-6">
          {/* Line Items */}
          <div className="bg-white rounded-lg shadow">
            <div className="p-6 border-b border-gray-200"><h2 className="text-lg font-medium text-gray-900">Line Items</h2></div>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Product</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Qty</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Unit Price</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Customer Description</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {quotation.lineItems.map((item) => (
                    <tr key={item.id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{item.product} ({item.productCode})</td>
                      <td className="px-6 py-4">
                        <input type="number" value={item.quantity} onChange={(e) => updateLineItem(item.id, 'quantity', parseInt(e.target.value) || 0)} className="w-20 px-2 py-1 border border-gray-300 rounded-md text-sm" disabled={!isManager} />
                      </td>
                      <td className="px-6 py-4">
                        <input type="number" value={item.unitPrice.toFixed(2)} onChange={(e) => updateLineItem(item.id, 'unitPrice', parseFloat(e.target.value) || 0)} className="w-28 px-2 py-1 border border-gray-300 rounded-md text-sm" step="0.01" disabled={!isManager} />
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${item.total.toFixed(2)}</td>
                      <td className="px-6 py-4">
                        <input type="text" value={item.customerDescription} onChange={(e) => updateLineItem(item.id, 'customerDescription', e.target.value)} className="w-full px-2 py-1 border border-gray-300 rounded-md text-sm" placeholder="Add description for customer" />
                      </td>
                      <td className="px-6 py-4"><button className="p-2 text-red-600 hover:text-red-800"><Trash2 className="h-4 w-4" /></button></td>
                    </tr>
                  ))}
                </tbody>
                <tfoot className="bg-gray-50">
                  <tr>
                    <td colSpan="3" className="px-6 py-3 text-right text-sm font-medium text-gray-500 uppercase">Total Value</td>
                    <td colSpan="3" className="px-6 py-3 text-left text-lg font-bold text-gray-900">${totalValue.toFixed(2)}</td>
                  </tr>
                </tfoot>
              </table>
            </div>
          </div>

          {/* Terms & Conditions */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Terms & Conditions</h2>
            <div className="space-y-4">
              {quotation.termsConditions.map((term) => (
                <div key={term.id}>
                  <h3 className="font-medium">{term.title}</h3>
                  <textarea defaultValue={term.content} className="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md text-sm" rows="2" />
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Version History */}
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Version History</h3>
            <ul className="space-y-3">
              {versionHistory.slice().reverse().map(v => (
                <li key={v.version} className="flex items-center justify-between p-2 rounded-md hover:bg-gray-50">
                  <div>
                    <p className="font-medium text-sm">Version {v.version} <StatusBadge status={v.status} /></p>
                    <p className="text-xs text-gray-500">by {v.user} on {v.date}</p>
                  </div>
                  <button className="text-sm text-blue-600">View</button>
                </li>
              ))}
            </ul>
          </div>
          
          <TimelinePanel title="Quotation History" timeline={timeline} />
        </div>
      </div>
    </div>
  );
};

export default QuotationCreateEdit;
PK
     �*7[               src/components/orders/PK
     �*7[��;y�  �  +   src/components/orders/ReceivedOrderForm.jsximport React, { useState } from 'react';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
import { ArrowLeft, Plus, Trash2, Upload, Save, CheckCircle, FileText } from 'lucide-react';
import StatusBadge from '../ui/StatusBadge';

const ReceivedOrderForm = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const location = useLocation();
  const quotationId = location.state?.quotationId;

  const isEdit = !!id;

  const [order, setOrder] = useState({
    id: id || 'DRAFT',
    quotationId: quotationId || 'QTN-2024-005',
    customer: 'Tech Solutions Inc.',
    status: isEdit ? 'Confirmed' : 'Draft',
    clientPoNo: '',
    poDate: new Date().toISOString().split('T')[0],
    poValue: 0,
    paymentTerms: 'Net 30',
    deliveryTerms: 'FOB Destination',
    lpoCopy: null,
    items: [
      { id: 1, product: 'High-Performance Processor', code: 'COMP-001', quotedQty: 50, poQty: 50 },
      { id: 2, product: 'DDR5 Memory Module', code: 'MEM-002', quotedQty: 100, poQty: 100 },
    ],
  });

  const handleItemChange = (itemId, field, value) => {
    setOrder(prev => ({
      ...prev,
      items: prev.items.map(item =>
        item.id === itemId ? { ...item, [field]: value } : item
      ),
    }));
  };

  const handleFileChange = (e) => {
    if (e.target.files[0]) {
      setOrder(prev => ({ ...prev, lpoCopy: e.target.files[0] }));
    }
  };

  const markAsConfirmed = () => {
    if (!order.lpoCopy) {
      alert('Please upload the LPO copy before confirming.');
      return;
    }
    setOrder(prev => ({ ...prev, status: 'Confirmed' }));
    alert('Order marked as Confirmed. You can now create a Sales Order.');
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <button onClick={() => navigate(-1)} className="p-2 hover:bg-gray-100 rounded-lg"><ArrowLeft className="h-5 w-5" /></button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{isEdit ? `Received Order ${order.id}` : 'New Received Order'}</h1>
            <p className="text-gray-600">Linked to Quotation: {order.quotationId}</p>
          </div>
          <StatusBadge status={order.status} />
        </div>
        <div className="flex items-center space-x-3">
          {order.status !== 'Confirmed' && (
            <>
              <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"><Save className="h-4 w-4 mr-2" />Save Draft</button>
              <button onClick={markAsConfirmed} className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"><CheckCircle className="h-4 w-4 mr-2" />Mark as Confirmed</button>
            </>
          )}
          {order.status === 'Confirmed' && (
            <button onClick={() => navigate('/sales-orders/new', { state: { receivedOrderId: order.id } })} className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"><FileText className="h-4 w-4 mr-2" />Create Sales Order</button>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Client PO Details</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <input type="text" placeholder="Client PO No." value={order.clientPoNo} onChange={e => setOrder(prev => ({ ...prev, clientPoNo: e.target.value }))} className="px-3 py-2 border border-gray-300 rounded-md" />
              <input type="date" value={order.poDate} onChange={e => setOrder(prev => ({ ...prev, poDate: e.target.value }))} className="px-3 py-2 border border-gray-300 rounded-md" />
              <input type="text" placeholder="Payment Terms" value={order.paymentTerms} onChange={e => setOrder(prev => ({ ...prev, paymentTerms: e.target.value }))} className="px-3 py-2 border border-gray-300 rounded-md" />
              <input type="text" placeholder="Delivery Terms" value={order.deliveryTerms} onChange={e => setOrder(prev => ({ ...prev, deliveryTerms: e.target.value }))} className="px-3 py-2 border border-gray-300 rounded-md" />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Items from Quotation</h2>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Product</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Quoted Qty</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">PO Qty</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {order.items.map(item => (
                    <tr key={item.id}>
                      <td className="px-6 py-4 whitespace-nowrap">{item.product} ({item.code})</td>
                      <td className="px-6 py-4 whitespace-nowrap">{item.quotedQty}</td>
                      <td className="px-6 py-4">
                        <input type="number" value={item.poQty} onChange={e => handleItemChange(item.id, 'poQty', parseInt(e.target.value))} className="w-24 px-2 py-1 border border-gray-300 rounded-md" />
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div className="space-y-6">
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Upload LPO Copy</h2>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <Upload className="mx-auto h-12 w-12 text-gray-400" />
              <label htmlFor="lpo-upload" className="cursor-pointer mt-2 block text-sm font-medium text-blue-600 hover:text-blue-500">
                {order.lpoCopy ? `Selected: ${order.lpoCopy.name}` : 'Click to upload'}
                <input id="lpo-upload" name="lpo-upload" type="file" className="sr-only" onChange={handleFileChange} />
              </label>
              <p className="text-xs text-gray-500 mt-1">PDF, PNG, JPG up to 25MB</p>
            </div>
            {order.lpoCopy && (
              <div className="mt-4">
                <p className="text-sm font-medium">File Preview:</p>
                <div className="mt-2 p-2 border rounded-md flex items-center justify-between">
                  <span className="text-sm truncate">{order.lpoCopy.name}</span>
                  <button onClick={() => setOrder(prev => ({ ...prev, lpoCopy: null }))}><Trash2 className="h-4 w-4 text-red-500" /></button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReceivedOrderForm;
PK
     �*7[��Ŵ0  �0  (   src/components/orders/SalesOrderForm.jsximport React, { useState, useMemo } from 'react';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
import { ArrowLeft, Package, Lock, Truck, Upload, Plus, Trash2 } from 'lucide-react';
import StatusBadge from '../ui/StatusBadge';
import BlockRequestModal from '../inventory/BlockRequestModal';

// A specific badge component for line item statuses for better clarity
const LineStatusBadge = ({ status }) => {
  const config = {
    'Fully Allocated': 'bg-green-100 text-green-800',
    'Partially Allocated': 'bg-blue-100 text-blue-800',
    'Backordered': 'bg-orange-100 text-orange-800',
    'Block Requested': 'bg-purple-100 text-purple-800',
    'Pending': 'bg-gray-100 text-gray-800',
  }[status] || 'bg-gray-100 text-gray-800';

  return <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${config}`}>{status}</span>;
};


const SalesOrderForm = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const location = useLocation();
  const receivedOrderId = location.state?.receivedOrderId;

  const isEdit = !!id;
  const [showBlockModal, setShowBlockModal] = useState(false);
  const [itemToBlock, setItemToBlock] = useState(null);

  const [order, setOrder] = useState({
    id: id || 'DRAFT',
    receivedOrderId: receivedOrderId || 'RO-2024-001',
    customer: 'Tech Solutions Inc.',
    status: isEdit ? 'Ready' : 'Draft',
    items: [
      { id: 1, product: 'High-Performance Processor', code: 'COMP-001', requestedQty: 50, availableQty: 75, blockedQty: 10, allocatedQty: 0, lineStatus: 'Pending' },
      { id: 2, product: 'DDR5 Memory Module', code: 'MEM-002', requestedQty: 100, availableQty: 80, blockedQty: 0, allocatedQty: 0, lineStatus: 'Pending' },
      { id: 3, product: 'NVMe SSD Drive', code: 'STO-003', requestedQty: 25, availableQty: 0, blockedQty: 0, allocatedQty: 0, lineStatus: 'Pending' },
      { id: 4, product: 'Server Casing', code: 'CASE-007', requestedQty: 10, availableQty: 10, blockedQty: 0, allocatedQty: 0, lineStatus: 'Pending' },
    ],
    deliverySchedule: [],
    shippingInstructions: '',
    attachments: [],
  });

  const updateLineStatus = (item, newAllocatedQty) => {
    if (item.lineStatus === 'Block Requested') return 'Block Requested';
    if (newAllocatedQty === item.requestedQty) return 'Fully Allocated';
    if (newAllocatedQty > 0) return 'Partially Allocated';
    const allocatable = Math.max(0, item.availableQty - item.blockedQty);
    if (allocatable === 0) return 'Backordered';
    return 'Pending';
  };

  const handleAllocationChange = (itemId, value) => {
    const numValue = parseInt(value, 10) || 0;
    setOrder(prev => ({
      ...prev,
      items: prev.items.map(item => {
        if (item.id === itemId) {
          const allocatable = Math.max(0, item.availableQty - item.blockedQty);
          const maxAllocatable = Math.min(item.requestedQty, allocatable);
          const newAllocatedQty = Math.min(numValue, maxAllocatable);
          const newLineStatus = updateLineStatus(item, newAllocatedQty);
          return { ...item, allocatedQty: newAllocatedQty, lineStatus: newLineStatus };
        }
        return item;
      }),
    }));
  };

  const allocateAllAvailable = () => {
    setOrder(prev => ({
      ...prev,
      items: prev.items.map(item => {
        const allocatable = Math.max(0, item.availableQty - item.blockedQty);
        const newAllocatedQty = Math.min(item.requestedQty, allocatable);
        const newLineStatus = updateLineStatus(item, newAllocatedQty);
        return { ...item, allocatedQty: newAllocatedQty, lineStatus: newLineStatus };
      }),
    }));
  };
  
  const handleBlockRequest = (item) => {
    setItemToBlock(item);
    setShowBlockModal(true);
  };

  const handleBlockSubmit = (details) => {
    console.log('Block requested:', details);
    // Update the line item status and the overall order status
    setOrder(prev => ({
      ...prev,
      status: 'Pending Block Approval',
      items: prev.items.map(item => 
        item.id === itemToBlock.id ? { ...item, lineStatus: 'Block Requested' } : item
      )
    }));
    setShowBlockModal(false);
    alert('Inventory block request submitted for approval.');
  };

  const addShipment = () => {
    setOrder(prev => ({
      ...prev,
      deliverySchedule: [...prev.deliverySchedule, { id: Date.now(), date: '', notes: '' }]
    }));
  };

  const removeShipment = (shipmentId) => {
    setOrder(prev => ({
      ...prev,
      deliverySchedule: prev.deliverySchedule.filter(s => s.id !== shipmentId)
    }));
  };

  const handleShipmentChange = (shipmentId, field, value) => {
    setOrder(prev => ({
      ...prev,
      deliverySchedule: prev.deliverySchedule.map(s => 
        s.id === shipmentId ? { ...s, [field]: value } : s
      )
    }));
  };

  const canGenerateOrder = useMemo(() => {
    return order.items.some(item => item.allocatedQty > 0);
  }, [order.items]);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-wrap items-center justify-between gap-4">
        <div className="flex items-center space-x-4">
          <button onClick={() => navigate(-1)} className="p-2 hover:bg-gray-100 rounded-lg"><ArrowLeft className="h-5 w-5" /></button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{isEdit ? `Sales Order ${order.id}` : 'New Sales Order'}</h1>
            <p className="text-gray-600">From Received Order: {order.receivedOrderId}</p>
          </div>
          <StatusBadge status={order.status} />
        </div>
        <div className="flex items-center space-x-3">
          <button onClick={allocateAllAvailable} className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
            Allocate All Available
          </button>
          <button disabled={!canGenerateOrder} className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed">
            <Package className="h-4 w-4 mr-2" />
            Generate Sales Order
          </button>
        </div>
      </div>

      {/* Inventory Allocation Table */}
      <div className="bg-white rounded-lg shadow">
        <div className="p-6 border-b border-gray-200"><h2 className="text-lg font-medium text-gray-900">Inventory Allocation</h2></div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Product</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Requested</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Available</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Blocked</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Allocatable</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Allocate Qty</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Line Status</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {order.items.map(item => {
                const allocatable = Math.max(0, item.availableQty - item.blockedQty);
                const isShortfall = allocatable < item.requestedQty;
                return (
                  <tr key={item.id} className={isShortfall && item.allocatedQty < item.requestedQty ? 'bg-yellow-50' : ''}>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-800">{item.product} ({item.code})</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">{item.requestedQty}</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">{item.availableQty}</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">{item.blockedQty}</td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm font-bold text-gray-800">{allocatable}</td>
                    <td className="px-4 py-4">
                      <input type="number" value={item.allocatedQty} onChange={e => handleAllocationChange(item.id, e.target.value)} max={Math.min(item.requestedQty, allocatable)} className="w-24 px-2 py-1 border border-gray-300 rounded-md" />
                    </td>
                    <td className="px-4 py-4"><LineStatusBadge status={item.lineStatus} /></td>
                    <td className="px-4 py-4">
                      <div className="flex space-x-2">
                        {isShortfall && allocatable > 0 && (
                          <button onClick={() => handleBlockRequest(item)} className="flex items-center text-sm px-2 py-1 border border-purple-500 text-purple-600 rounded hover:bg-purple-50" title="Request to block available stock">
                            <Lock className="h-3 w-3 mr-1" /> Block
                          </button>
                        )}
                        {allocatable === 0 && (
                          <button onClick={() => navigate('/fpo/new', { state: { salesOrderItem: { ...item, salesOrderId: order.id } } })} className="flex items-center text-sm px-2 py-1 border border-orange-500 text-orange-600 rounded hover:bg-orange-50" title="Create a Forward Purchase Order">
                            <Truck className="h-3 w-3 mr-1" /> FPO
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>

      {/* Delivery Schedule & Notes */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-medium text-gray-900">Delivery Schedule</h2>
            <button onClick={addShipment} className="flex items-center px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200">
              <Plus className="h-4 w-4 mr-2" /> Add Shipment
            </button>
          </div>
          <div className="space-y-3">
            {order.deliverySchedule.length > 0 ? order.deliverySchedule.map(shipment => (
              <div key={shipment.id} className="flex items-center space-x-2">
                <input type="date" value={shipment.date} onChange={e => handleShipmentChange(shipment.id, 'date', e.target.value)} className="flex-1 px-2 py-1 border border-gray-300 rounded-md text-sm" />
                <button onClick={() => removeShipment(shipment.id)} className="p-1 text-red-500"><Trash2 className="h-4 w-4" /></button>
              </div>
            )) : <p className="text-sm text-gray-500">No shipments scheduled. Add one to plan deliveries.</p>}
          </div>
        </div>
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-lg font-medium text-gray-900 mb-4">Shipping Instructions & Attachments</h2>
          <div className="space-y-4">
            <textarea
              rows="3"
              placeholder="Add special notes or instructions for shipping..."
              value={order.shippingInstructions}
              onChange={e => setOrder(prev => ({...prev, shippingInstructions: e.target.value}))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
              <Upload className="mx-auto h-8 w-8 text-gray-400" />
              <p className="mt-2 text-sm text-gray-600">Upload LPO or other supporting docs</p>
            </div>
          </div>
        </div>
      </div>

      {showBlockModal && (
        <BlockRequestModal 
          item={itemToBlock}
          onClose={() => setShowBlockModal(false)}
          onSubmit={handleBlockSubmit}
        />
      )}
    </div>
  );
};

export default SalesOrderForm;
PK
     �*7[               src/components/fpo/PK
     �*7[b2�.  .     src/components/fpo/FPOForm.jsximport React, { useState } from 'react';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
import { ArrowLeft, Save, Send, Download, Plus, Trash2, Truck } from 'lucide-react';
import StatusBadge from '../ui/StatusBadge';
import { useAuth } from '../../context/AuthContext';

const FPOForm = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const location = useLocation();
  const { user } = useAuth();
  const salesOrderItem = location.state?.salesOrderItem;
  const isEdit = !!id;
  const isManager = user?.role === 'Sales Manager';

  const [fpo, setFpo] = useState({
    id: id || 'DRAFT',
    salesOrderId: salesOrderItem?.salesOrderId || 'SO-2024-021',
    status: isEdit ? 'Approved' : 'Draft',
    vendor: '',
    leadTime: '',
    shippingAddress: 'Main Warehouse, 123 Industrial Ave, Metro City',
    items: salesOrderItem ? [{ 
      id: salesOrderItem.id, 
      product: salesOrderItem.product, 
      productCode: salesOrderItem.code, 
      quantity: salesOrderItem.requestedQty, 
      vendorRate: 0, 
      currency: 'USD' 
    }] : [],
  });

  const handleItemChange = (itemId, field, value) => {
    setFpo(prev => ({
      ...prev,
      items: prev.items.map(item =>
        item.id === itemId ? { ...item, [field]: value } : item
      ),
    }));
  };
  
  const submitForApproval = () => {
    setFpo(prev => ({ ...prev, status: 'Submitted' }));
    alert('FPO submitted for approval.');
  };

  const approveFPO = () => {
    setFpo(prev => ({ ...prev, status: 'Approved' }));
    alert('FPO has been approved.');
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <button onClick={() => navigate(-1)} className="p-2 hover:bg-gray-100 rounded-lg"><ArrowLeft className="h-5 w-5" /></button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{isEdit ? `FPO ${fpo.id}` : 'New FPO'}</h1>
            <p className="text-gray-600">Linked to Sales Order: {fpo.salesOrderId}</p>
          </div>
          <StatusBadge status={fpo.status} />
        </div>
        <div className="flex items-center space-x-3">
          {user.role !== 'Sales Manager' && fpo.status === 'Draft' && (
            <>
              <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"><Save className="h-4 w-4 mr-2" />Save Draft</button>
              <button onClick={submitForApproval} className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"><Send className="h-4 w-4 mr-2" />Submit for Approval</button>
            </>
          )}
          {isManager && fpo.status === 'Submitted' && (
            <button onClick={approveFPO} className="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"><Send className="h-4 w-4 mr-2" />Approve FPO</button>
          )}
          <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"><Download className="h-4 w-4 mr-2" />Download PDF</button>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-medium text-gray-900 mb-4">FPO Details</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <input type="text" placeholder="Select Vendor" value={fpo.vendor} onChange={e => setFpo(prev => ({ ...prev, vendor: e.target.value }))} className="px-3 py-2 border border-gray-300 rounded-md" />
          <input type="number" placeholder="Lead Time (days)" value={fpo.leadTime} onChange={e => setFpo(prev => ({ ...prev, leadTime: e.target.value }))} className="px-3 py-2 border border-gray-300 rounded-md" />
          <input type="text" placeholder="Shipping Address" value={fpo.shippingAddress} onChange={e => setFpo(prev => ({ ...prev, shippingAddress: e.target.value }))} className="px-3 py-2 border border-gray-300 rounded-md" />
        </div>
      </div>
      
      <div className="bg-white rounded-lg shadow">
        <div className="p-6 border-b border-gray-200"><h2 className="text-lg font-medium text-gray-900">Items to Procure</h2></div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Product</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Quantity</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Vendor Rate</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Currency</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {fpo.items.map(item => (
                <tr key={item.id}>
                  <td className="px-6 py-4">{item.product} ({item.productCode})</td>
                  <td className="px-6 py-4"><input type="number" value={item.quantity} onChange={e => handleItemChange(item.id, 'quantity', parseInt(e.target.value))} className="w-24 px-2 py-1 border border-gray-300 rounded-md" /></td>
                  <td className="px-6 py-4"><input type="number" value={item.vendorRate} onChange={e => handleItemChange(item.id, 'vendorRate', parseFloat(e.target.value))} className="w-28 px-2 py-1 border border-gray-300 rounded-md" /></td>
                  <td className="px-6 py-4"><input type="text" value={item.currency} onChange={e => handleItemChange(item.id, 'currency', e.target.value)} className="w-20 px-2 py-1 border border-gray-300 rounded-md" /></td>
                  <td className="px-6 py-4 font-medium">${(item.quantity * item.vendorRate).toFixed(2)}</td>
                  <td className="px-6 py-4"><button className="p-2 text-red-600 hover:text-red-800"><Trash2 className="h-4 w-4" /></button></td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default FPOForm;
PK
     �*7[               src/components/inward/PK
     �*7[��;k�>  �>  '   src/components/inward/InwardReceipt.jsximport React, { useState, useMemo } from 'react';
import { Truck, CheckCircle, Plus, Upload, Save, Map, FileText, AlertTriangle, Trash2, ArrowLeft } from 'lucide-react';
import ChildPartMappingModal from './ChildPartMappingModal';
import StatusBadge from '../ui/StatusBadge';

// Mock data for the dashboard part
const incomingConsignments = [
  { 
    id: 'FPO-2024-008', 
    vendor: 'Global Electronics', 
    eta: 'Today',
    status: 'In Transit',
    expectedQty: 40,
    receivedQty: 0,
  },
  { 
    id: 'FPO-2024-009', 
    vendor: 'Component Solutions', 
    eta: 'Tomorrow',
    status: 'Awaiting Receipt',
    expectedQty: 50,
    receivedQty: 0,
  },
  {
    id: 'FPO-2024-011',
    vendor: 'Advanced Parts Co.',
    eta: 'Yesterday',
    status: 'Partially Received',
    expectedQty: 100,
    receivedQty: 60,
  }
];

const fpoItemsData = {
    'FPO-2024-008': [
      { id: 1, product: 'Motherboard Assembly', code: 'MB-ASM-01', expectedQty: 20, receivedQty: 0, batchNo: '', packagingDetails: '', status: 'Pending', hasChildParts: true },
      { id: 2, product: 'Power Supply Unit', code: 'PSU-004', expectedQty: 20, receivedQty: 0, batchNo: '', packagingDetails: '', status: 'Pending', hasChildParts: false },
    ],
    'FPO-2024-009': [
      { id: 3, product: 'Casing Kit', code: 'CS-KIT-02', expectedQty: 50, receivedQty: 0, batchNo: '', packagingDetails: '', status: 'Pending', hasChildParts: true },
    ],
    'FPO-2024-011': [
      { id: 4, product: 'Industrial Sensor', code: 'SEN-IND-01', expectedQty: 100, receivedQty: 60, batchNo: 'B-IS-0410', packagingDetails: 'Box of 100', status: 'Partial', hasChildParts: false },
    ]
};


const InwardReceipt = () => {
  const [processingFpoId, setProcessingFpoId] = useState(null); // New state to control view
  const [vendorInvoiceNo, setVendorInvoiceNo] = useState('');
  const [items, setItems] = useState([]);
  const [unplannedItems, setUnplannedItems] = useState([]);
  const [showMappingModal, setShowMappingModal] = useState(false);
  const [itemToMap, setItemToMap] = useState(null);

  const startProcessingFpo = (fpoId) => {
    setProcessingFpoId(fpoId);
    setItems(fpoItemsData[fpoId]?.map(item => ({
        ...item, 
        // If it's a partially received item, keep the receivedQty, otherwise reset to 0
        receivedQty: item.status === 'Partial' ? item.receivedQty : 0, 
        status: item.status === 'Partial' ? 'Partial' : 'Pending'
    })) || []);
    setUnplannedItems([]);
    setVendorInvoiceNo('');
  };

  const backToDashboard = () => {
    setProcessingFpoId(null);
    setItems([]);
  };

  const handleItemChange = (id, field, value) => {
    setItems(prev => prev.map(item => {
      if (item.id === id) {
        const updatedItem = { ...item, [field]: value };
        if (field === 'receivedQty') {
          const qty = parseInt(value, 10) || 0;
          if (qty === 0) updatedItem.status = 'Pending';
          else if (qty < item.expectedQty) updatedItem.status = 'Partial';
          else if (qty === item.expectedQty) updatedItem.status = 'Full';
          else updatedItem.status = 'Over-received';
        }
        return updatedItem;
      }
      return item;
    }));
  };
  
  const handleUnplannedItemChange = (id, field, value) => {
    setUnplannedItems(prev => prev.map(item => item.id === id ? { ...item, [field]: value } : item));
  };
  
  const addUnplannedItem = () => {
    setUnplannedItems(prev => [...prev, { id: Date.now(), product: '', code: '', receivedQty: 1, batchNo: '', packagingDetails: '' }]);
  };
  
  const removeUnplannedItem = (id) => {
    setUnplannedItems(prev => prev.filter(item => item.id !== id));
  };

  const handleMapChildParts = (item) => {
    setItemToMap(item);
    setShowMappingModal(true);
  };
  
  const overallStatus = useMemo(() => {
    if (!items || items.length === 0) return 'Pending';
    const totalExpected = items.reduce((acc, item) => acc + item.expectedQty, 0);
    const totalReceived = items.reduce((acc, item) => acc + (parseInt(item.receivedQty, 10) || 0), 0);
    
    if (totalReceived === 0) return 'Pending';
    if (totalReceived >= totalExpected) return 'Fully Received';
    return 'Partially Received';
  }, [items]);

  // View for the Inward Dashboard
  const renderDashboard = () => (
    <div className="space-y-6">
        <div className="flex flex-wrap items-center justify-between gap-4">
            <h1 className="text-2xl font-bold text-gray-900">Inward Dashboard</h1>
            <button className="flex items-center justify-center px-4 py-2 border border-dashed border-gray-400 text-gray-600 rounded-lg hover:bg-gray-50">
                <Plus className="h-4 w-4 mr-2" /> Create Unplanned Receipt
            </button>
        </div>
        <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Incoming Consignments</h2>
            <div className="space-y-4">
                {incomingConsignments.map(consignment => (
                    <div key={consignment.id} className="border rounded-lg p-4 flex flex-wrap items-center justify-between gap-4 hover:shadow-md transition-shadow">
                        <div className="flex-1 min-w-[200px]">
                            <p className="font-bold text-blue-600">{consignment.id}</p>
                            <p className="text-sm text-gray-700">{consignment.vendor}</p>
                        </div>
                        <div className="flex-1 min-w-[150px]">
                            <p className="text-sm text-gray-500">ETA</p>
                            <p className="font-medium">{consignment.eta}</p>
                        </div>
                        <div className="flex-1 min-w-[150px]">
                            <p className="text-sm text-gray-500">Expected vs. Received</p>
                            <p className="font-medium">{consignment.receivedQty} / {consignment.expectedQty} units</p>
                            <div className="w-full bg-gray-200 rounded-full h-2 mt-1">
                                <div 
                                    className="bg-green-500 h-2 rounded-full" 
                                    style={{ width: `${(consignment.receivedQty / consignment.expectedQty) * 100}%` }}
                                ></div>
                            </div>
                        </div>
                        <div className="flex-1 min-w-[120px] text-center">
                            <StatusBadge status={consignment.status} />
                        </div>
                        <div className="flex-shrink-0">
                            <button 
                                onClick={() => startProcessingFpo(consignment.id)}
                                className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                            >
                                <Truck className="h-4 w-4 mr-2" />
                                Process Receipt
                            </button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    </div>
  );

  // View for processing a single FPO (the existing form)
  const renderProcessingForm = () => (
    <div className="space-y-6">
      <div className="flex flex-wrap items-center justify-between gap-4">
        <div className="flex items-center space-x-4">
            <button onClick={backToDashboard} className="p-2 hover:bg-gray-100 rounded-lg"><ArrowLeft className="h-5 w-5" /></button>
            <h1 className="text-2xl font-bold text-gray-900">Process Receipt for {processingFpoId}</h1>
        </div>
        <div className="flex items-center space-x-3">
          <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"><Save className="h-4 w-4 mr-2" />Save as Draft</button>
          <button className="flex items-center px-4 py-2 border border-green-600 text-green-700 rounded-lg hover:bg-green-50">Mark as {overallStatus}</button>
          <button className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"><CheckCircle className="h-4 w-4 mr-2" />Submit Receipt</button>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-medium text-gray-900 mb-4">Consignment Details</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <input type="text" placeholder="Vendor Invoice No." value={vendorInvoiceNo} onChange={e => setVendorInvoiceNo(e.target.value)} className="md:col-span-1 px-3 py-2 border border-gray-300 rounded-md" />
        </div>
      </div>

      {items.length > 0 && (
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200"><h2 className="text-lg font-medium text-gray-900">Receiving Items for {processingFpoId}</h2></div>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Product</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Expected</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Received</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Discrepancy</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Batch/Serial</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {items.map(item => {
                  const discrepancy = (parseInt(item.receivedQty, 10) || 0) - item.expectedQty;
                  return (
                    <tr key={item.id} className={discrepancy !== 0 && item.receivedQty > 0 ? 'bg-yellow-50' : ''}>
                      <td className="px-4 py-2 text-sm">{item.product} ({item.code})</td>
                      <td className="px-4 py-2 text-sm">{item.expectedQty}</td>
                      <td className="px-4 py-2"><input type="number" value={item.receivedQty} onChange={e => handleItemChange(item.id, 'receivedQty', e.target.value)} className="w-20 px-2 py-1 border border-gray-300 rounded-md" /></td>
                      <td className={`px-4 py-2 text-sm font-medium ${discrepancy < 0 ? 'text-red-600' : discrepancy > 0 ? 'text-orange-600' : ''}`}>{discrepancy !== 0 ? discrepancy : '—'}</td>
                      <td className="px-4 py-2"><input type="text" placeholder="Batch No." value={item.batchNo} onChange={e => handleItemChange(item.id, 'batchNo', e.target.value)} className="w-full px-2 py-1 border border-gray-300 rounded-md" /></td>
                      <td className="px-4 py-2"><StatusBadge status={item.status} /></td>
                      <td className="px-4 py-2">
                        {item.hasChildParts && (
                          <button onClick={() => handleMapChildParts(item)} className="flex items-center text-sm px-2 py-1 border border-purple-500 text-purple-600 rounded hover:bg-purple-50">
                            <Map className="h-3 w-3 mr-1" /> Map Parts
                          </button>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      )}
      
      <div className="bg-white rounded-lg shadow">
        <div className="p-6 border-b border-gray-200 flex justify-between items-center">
          <h2 className="text-lg font-medium text-gray-900">Unplanned Items</h2>
          <button onClick={addUnplannedItem} className="flex items-center text-sm text-blue-600"><Plus className="h-4 w-4 mr-1" /> Add Item</button>
        </div>
        {unplannedItems.length > 0 && (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Product Name/Code</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Received Qty</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Batch/Serial</th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {unplannedItems.map(item => (
                  <tr key={item.id}>
                    <td className="px-4 py-2"><input type="text" placeholder="Product Name/Code" value={item.product} onChange={e => handleUnplannedItemChange(item.id, 'product', e.target.value)} className="w-full px-2 py-1 border rounded-md" /></td>
                    <td className="px-4 py-2"><input type="number" value={item.receivedQty} onChange={e => handleUnplannedItemChange(item.id, 'receivedQty', e.target.value)} className="w-24 px-2 py-1 border rounded-md" /></td>
                    <td className="px-4 py-2"><input type="text" placeholder="Batch No." value={item.batchNo} onChange={e => handleUnplannedItemChange(item.id, 'batchNo', e.target.value)} className="w-full px-2 py-1 border rounded-md" /></td>
                    <td className="px-4 py-2"><button onClick={() => removeUnplannedItem(item.id)} className="text-red-500 hover:text-red-700"><Trash2 className="h-4 w-4" /></button></td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
        {unplannedItems.length === 0 && <p className="p-6 text-sm text-gray-500">No unplanned items added.</p>}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-lg font-medium text-gray-900 mb-4">Upload Documents</h2>
          <div className="space-y-4">
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <Upload className="mx-auto h-10 w-10 text-gray-400" />
              <p className="mt-2 text-sm text-gray-600">Upload Vendor Invoice</p>
            </div>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <Upload className="mx-auto h-10 w-10 text-gray-400" />
              <p className="mt-2 text-sm text-gray-600">Upload Packing List</p>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-lg font-medium text-gray-900 mb-4">Map to Sales Orders</h2>
          <p className="text-sm text-gray-500 mb-2">If this receipt fulfills a specific backorder, link it here.</p>
          <input type="text" placeholder="Enter Sales Order ID (e.g., SO-2024-015)" className="w-full px-3 py-2 border border-gray-300 rounded-md" />
        </div>
      </div>

      {showMappingModal && itemToMap && (
        <ChildPartMappingModal
          item={itemToMap}
          onClose={() => setShowMappingModal(false)}
          onSave={(mappings) => {
            console.log(`Saved mappings for ${itemToMap.code}:`, mappings);
            setShowMappingModal(false);
          }}
        />
      )}
    </div>
  );

  return (
    <div>
        {processingFpoId ? renderProcessingForm() : renderDashboard()}
    </div>
  );
};

export default InwardReceipt;
PK
     �*7[               src/components/invoice/PK
     �*7[�0͆  �  &   src/components/invoice/InvoiceForm.jsximport React from 'react';

const InvoiceForm = () => {
  return (
    <div className="p-6 bg-white rounded-lg shadow">
      <h1 className="text-2xl font-bold">Invoice Form</h1>
      <p className="text-gray-600 mt-2">This page is under construction. Functionality for generating and managing customer invoices will be implemented here.</p>
    </div>
  );
};

export default InvoiceForm;
PK
     �*7[               src/components/inventory/PK
     �*7[�[.��  �  ,   src/components/inventory/InventoryMaster.jsximport React from 'react';
import { Plus, Edit, History, Sliders } from 'lucide-react';
import DataTable from '../ui/DataTable';
import { faker } from '@faker-js/faker';

const InventoryMaster = () => {
  const products = Array.from({ length: 50 }, (_, index) => ({
    id: `SKU-${String(index + 1).padStart(4, '0')}`,
    name: faker.commerce.productName(),
    description: faker.commerce.productDescription(),
    location: `WH-A, Rack ${faker.number.int({ min: 1, max: 20 })}, Shelf ${faker.number.int({ min: 1, max: 5 })}`,
    availableQty: faker.number.int({ min: 0, max: 500 }),
    blockedQty: faker.number.int({ min: 0, max: 50 }),
    allocatedQty: faker.number.int({ min: 0, max: 100 }),
    reorderLevel: faker.number.int({ min: 10, max: 50 }),
  }));

  const columns = [
    { key: 'id', label: 'SKU', sortable: true },
    { key: 'name', label: 'Product Name', sortable: true },
    { key: 'location', label: 'Location', sortable: true },
    { key: 'availableQty', label: 'Available', sortable: true },
    { key: 'blockedQty', label: 'Blocked', sortable: true },
    { key: 'allocatedQty', label: 'Allocated', sortable: true },
    { key: 'reorderLevel', label: 'Reorder Level', sortable: true },
    {
      key: 'actions',
      label: 'Actions',
      render: (_, row) => (
        <div className="flex space-x-2">
          <button className="p-1 text-blue-600" title="Adjust Stock"><Sliders className="h-4 w-4" /></button>
          <button className="p-1 text-purple-600" title="View History"><History className="h-4 w-4" /></button>
        </div>
      ),
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Inventory Master</h1>
          <p className="text-gray-600">View and manage all product stock levels.</p>
        </div>
        <button
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          <Plus className="h-4 w-4 mr-2" />
          Add New Product
        </button>
      </div>
      <DataTable columns={columns} data={products} selectable={true} />
    </div>
  );
};

export default InventoryMaster;
PK
     �*7[               src/components/audit/PK
     �*7[`ܱ��	  �	  #   src/components/audit/AuditTrail.jsximport React from 'react';
import { Filter } from 'lucide-react';
import DataTable from '../ui/DataTable';
import { faker } from '@faker-js/faker';

const AuditTrail = () => {
  const auditLogs = Array.from({ length: 100 }, (_, index) => {
    const entityType = faker.helpers.arrayElement(['Budget', 'Quotation', 'Sales Order', 'FPO', 'Inventory']);
    const action = faker.helpers.arrayElement(['Created', 'Updated', 'Approved', 'Rejected', 'Submitted', 'Deleted']);
    return {
      id: index + 1,
      timestamp: faker.date.recent({ days: 30 }).toISOString(),
      user: faker.person.fullName(),
      entity: `${entityType} ${faker.string.alphanumeric(8).toUpperCase()}`,
      action: action,
      details: action === 'Updated' ? `Status: Pending -> Submitted` : `Comment: ${faker.lorem.sentence()}`,
    };
  });

  const columns = [
    { key: 'timestamp', label: 'Timestamp', sortable: true, render: (ts) => new Date(ts).toLocaleString() },
    { key: 'user', label: 'User', sortable: true },
    { key: 'entity', label: 'Entity', sortable: true },
    { key: 'action', label: 'Action', sortable: true },
    { key: 'details', label: 'Details' },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Global Audit Trail</h1>
          <p className="text-gray-600">Track all significant actions across the system.</p>
        </div>
      </div>
      
      <div className="bg-white rounded-lg shadow p-4">
        <div className="flex flex-wrap items-center gap-4">
          <h3 className="text-lg font-medium">Filters</h3>
          <input type="text" placeholder="Filter by User" className="px-3 py-2 border rounded-md" />
          <input type="date" className="px-3 py-2 border rounded-md" />
          <select className="px-3 py-2 border rounded-md">
            <option>All Entities</option>
            <option>Enquiry</option>
            <option>Budget</option>
            <option>Sales Order</option>
          </select>
          <select className="px-3 py-2 border rounded-md">
            <option>All Actions</option>
            <option>Created</option>
            <option>Updated</option>
            <option>Approved</option>
          </select>
        </div>
      </div>

      <DataTable columns={columns} data={auditLogs} />
    </div>
  );
};

export default AuditTrail;
PK
     �*7[�zY��
  �
  $   src/components/budget/BudgetList.jsximport React from 'react';
import { useNavigate } from 'react-router-dom';
import { Plus, Eye, Edit } from 'lucide-react';
import DataTable from '../ui/DataTable';
import StatusBadge from '../ui/StatusBadge';
import { faker } from '@faker-js/faker';

const BudgetList = () => {
  const navigate = useNavigate();

  const budgets = Array.from({ length: 15 }, (_, index) => ({
    id: `B-2024-${String(index + 1).padStart(3, '0')}`,
    enquiryId: `ENQ-2024-${String(faker.number.int({ min: 1, max: 25 })).padStart(3, '0')}`,
    customer: faker.company.name(),
    status: faker.helpers.arrayElement(['Draft', 'Submitted', 'Approved', 'Rejected']),
    createdDate: faker.date.recent({ days: 30 }).toLocaleDateString(),
    totalValue: faker.finance.amount(5000, 50000, 2, '$'),
    submittedBy: faker.person.fullName(),
  }));

  const columns = [
    {
      key: 'id',
      label: 'Budget ID',
      sortable: true,
      render: (value, row) => (
        <button
          onClick={() => navigate(`/budget/${row.id}`)}
          className="text-blue-600 hover:text-blue-800 font-medium"
        >
          {value}
        </button>
      ),
    },
    { key: 'enquiryId', label: 'Enquiry ID', sortable: true },
    { key: 'customer', label: 'Customer', sortable: true },
    { key: 'status', label: 'Status', render: (value) => <StatusBadge status={value} /> },
    { key: 'totalValue', label: 'Total Value', sortable: true },
    { key: 'submittedBy', label: 'Submitted By', sortable: true },
    { key: 'createdDate', label: 'Created Date', sortable: true },
    {
      key: 'actions',
      label: 'Actions',
      render: (_, row) => (
        <div className="flex space-x-2">
          <button onClick={() => navigate(`/budget/${row.id}`)} className="p-1 text-blue-600 hover:text-blue-800" title="View"><Eye className="h-4 w-4" /></button>
          <button onClick={() => navigate(`/budget/${row.id}`)} className="p-1 text-gray-600 hover:text-gray-800" title="Edit"><Edit className="h-4 w-4" /></button>
        </div>
      ),
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Budgets</h1>
          <p className="text-gray-600">Manage internal cost and profit calculations.</p>
        </div>
        <button
          onClick={() => navigate('/budget/new')}
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          <Plus className="h-4 w-4 mr-2" />
          New Budget
        </button>
      </div>
      <DataTable columns={columns} data={budgets} onRowClick={(row) => navigate(`/budget/${row.id}`)} selectable={true} />
    </div>
  );
};

export default BudgetList;
PK
     �*7[��u�$  $  *   src/components/quotation/QuotationList.jsximport React from 'react';
import { useNavigate } from 'react-router-dom';
import { Plus, Eye, Edit, History } from 'lucide-react';
import DataTable from '../ui/DataTable';
import StatusBadge from '../ui/StatusBadge';
import { faker } from '@faker-js/faker';

const QuotationList = () => {
  const navigate = useNavigate();
  
  const quotations = Array.from({ length: 20 }, (_, index) => ({
    id: `QTN-2024-${String(index + 1).padStart(3, '0')}`,
    linkedBudget: `B-2024-${String(faker.number.int({ min: 1, max: 15 })).padStart(3, '0')}`,
    customer: faker.company.name(),
    status: faker.helpers.arrayElement([
      'Draft', 'Pending Approval', 'Approved', 'Sent', 'Revised', 'Closed'
    ]),
    createdDate: faker.date.recent({ days: 30 }).toLocaleDateString(),
    totalValue: faker.finance.amount(5000, 50000, 2, '$'),
    version: `v${faker.number.int({ min: 1, max: 3 })}`
  }));

  const columns = [
    {
      key: 'id',
      label: 'Quotation No.',
      sortable: true,
      render: (value, row) => (
        <button
          onClick={() => navigate(`/quotations/${row.id}`)}
          className="text-blue-600 hover:text-blue-800 font-medium"
        >
          {value}
        </button>
      )
    },
    {
      key: 'linkedBudget',
      label: 'Linked Budget',
      sortable: true,
    },
    {
      key: 'customer',
      label: 'Customer',
      sortable: true,
    },
    {
      key: 'status',
      label: 'Status',
      render: (value) => <StatusBadge status={value} />
    },
    {
      key: 'version',
      label: 'Version',
      render: (value) => <span className="text-sm text-gray-600">{value}</span>
    },
    {
      key: 'totalValue',
      label: 'Total Value',
      sortable: true,
    },
    {
      key: 'createdDate',
      label: 'Created Date',
      sortable: true,
    },
    {
      key: 'actions',
      label: 'Actions',
      render: (_, row) => (
        <div className="flex space-x-2">
          <button
            onClick={() => navigate(`/quotations/${row.id}`)}
            className="p-1 text-blue-600 hover:text-blue-800"
            title="View"
          >
            <Eye className="h-4 w-4" />
          </button>
          <button
            onClick={() => navigate(`/quotations/${row.id}`)}
            className="p-1 text-gray-600 hover:text-gray-800"
            title="Edit"
          >
            <Edit className="h-4 w-4" />
          </button>
          <button
            onClick={() => { /* Open history modal or page */ }}
            className="p-1 text-purple-600 hover:text-purple-800"
            title="History"
          >
            <History className="h-4 w-4" />
          </button>
        </div>
      )
    }
  ];

  const handleRowClick = (row) => {
    navigate(`/quotations/${row.id}`);
  };

  const handleCreateNew = () => {
    navigate('/quotations/new');
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Quotations</h1>
          <p className="text-gray-600">Manage customer quotations and revisions</p>
        </div>
        <button
          onClick={handleCreateNew}
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          <Plus className="h-4 w-4 mr-2" />
          New Quotation
        </button>
      </div>

      <DataTable
        columns={columns}
        data={quotations}
        onRowClick={handleRowClick}
        selectable={true}
      />
    </div>
  );
};

export default QuotationList;
PK
     �*7[���_b
  b
  +   src/components/orders/ReceivedOrderList.jsximport React from 'react';
import { useNavigate } from 'react-router-dom';
import { Plus, Eye, Edit } from 'lucide-react';
import DataTable from '../ui/DataTable';
import StatusBadge from '../ui/StatusBadge';
import { faker } from '@faker-js/faker';

const ReceivedOrderList = () => {
  const navigate = useNavigate();

  const orders = Array.from({ length: 18 }, (_, index) => ({
    id: `RO-2024-${String(index + 1).padStart(3, '0')}`,
    quotationId: `QTN-2024-${String(faker.number.int({ min: 1, max: 20 })).padStart(3, '0')}`,
    customer: faker.company.name(),
    status: faker.helpers.arrayElement(['Draft', 'Submitted', 'Confirmed']),
    poNumber: `PO-${faker.string.alphanumeric(8).toUpperCase()}`,
    poDate: faker.date.recent({ days: 15 }).toLocaleDateString(),
    poValue: faker.finance.amount(5000, 50000, 2, '$'),
  }));

  const columns = [
    {
      key: 'id',
      label: 'Received Order ID',
      render: (value, row) => <button onClick={() => navigate(`/received-orders/${row.id}`)} className="text-blue-600 hover:text-blue-800 font-medium">{value}</button>,
    },
    { key: 'quotationId', label: 'Linked Quotation' },
    { key: 'customer', label: 'Customer' },
    { key: 'poNumber', label: 'Client PO No.' },
    { key: 'poValue', label: 'PO Value' },
    { key: 'poDate', label: 'PO Date' },
    { key: 'status', label: 'Status', render: (value) => <StatusBadge status={value} /> },
    {
      key: 'actions',
      label: 'Actions',
      render: (_, row) => (
        <div className="flex space-x-2">
          <button onClick={() => navigate(`/received-orders/${row.id}`)} className="p-1 text-blue-600" title="View"><Eye className="h-4 w-4" /></button>
          <button onClick={() => navigate(`/received-orders/${row.id}`)} className="p-1 text-gray-600" title="Edit"><Edit className="h-4 w-4" /></button>
        </div>
      ),
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Received Orders</h1>
          <p className="text-gray-600">Manage incoming client Purchase Orders (POs).</p>
        </div>
        <button
          onClick={() => navigate('/received-orders/new')}
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          <Plus className="h-4 w-4 mr-2" />
          New Received Order
        </button>
      </div>
      <DataTable columns={columns} data={orders} onRowClick={(row) => navigate(`/received-orders/${row.id}`)} selectable={true} />
    </div>
  );
};

export default ReceivedOrderList;
PK
     �*7[��c
  
  (   src/components/orders/SalesOrderList.jsximport React from 'react';
import { useNavigate } from 'react-router-dom';
import { Plus, Eye, Edit } from 'lucide-react';
import DataTable from '../ui/DataTable';
import StatusBadge from '../ui/StatusBadge';
import { faker } from '@faker-js/faker';

const SalesOrderList = () => {
  const navigate = useNavigate();

  const orders = Array.from({ length: 22 }, (_, index) => ({
    id: `SO-2024-${String(index + 1).padStart(3, '0')}`,
    receivedOrderId: `RO-2024-${String(faker.number.int({ min: 1, max: 18 })).padStart(3, '0')}`,
    customer: faker.company.name(),
    status: faker.helpers.arrayElement(['Draft', 'Pending Block Approval', 'Ready', 'Partial Delivered', 'Completed']),
    deliveryDate: faker.date.future({ years: 0.1 }).toLocaleDateString(),
    totalValue: faker.finance.amount(5000, 50000, 2, '$'),
  }));

  const columns = [
    {
      key: 'id',
      label: 'Sales Order No.',
      render: (value, row) => <button onClick={() => navigate(`/sales-orders/${row.id}`)} className="text-blue-600 hover:text-blue-800 font-medium">{value}</button>,
    },
    { key: 'receivedOrderId', label: 'Linked Received Order' },
    { key: 'customer', label: 'Customer' },
    { key: 'deliveryDate', label: 'Scheduled Delivery' },
    { key: 'totalValue', label: 'Value' },
    { key: 'status', label: 'Status', render: (value) => <StatusBadge status={value} /> },
    {
      key: 'actions',
      label: 'Actions',
      render: (_, row) => (
        <div className="flex space-x-2">
          <button onClick={() => navigate(`/sales-orders/${row.id}`)} className="p-1 text-blue-600" title="View"><Eye className="h-4 w-4" /></button>
          <button onClick={() => navigate(`/sales-orders/${row.id}`)} className="p-1 text-gray-600" title="Edit"><Edit className="h-4 w-4" /></button>
        </div>
      ),
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Sales Orders</h1>
          <p className="text-gray-600">Manage delivery orders and fulfillment.</p>
        </div>
        <button
          onClick={() => navigate('/sales-orders/new')}
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          <Plus className="h-4 w-4 mr-2" />
          New Sales Order
        </button>
      </div>
      <DataTable columns={columns} data={orders} onRowClick={(row) => navigate(`/sales-orders/${row.id}`)} selectable={true} />
    </div>
  );
};

export default SalesOrderList;
PK
     �*7[��M	  	  2   src/components/inventory/InventoryBlockingList.jsximport React from 'react';
import { useNavigate } from 'react-router-dom';
import { Eye, Unlock } from 'lucide-react';
import DataTable from '../ui/DataTable';
import StatusBadge from '../ui/StatusBadge';
import { faker } from '@faker-js/faker';

const InventoryBlockingList = () => {
  const navigate = useNavigate();

  const blocks = Array.from({ length: 8 }, (_, index) => ({
    id: `BLK-${String(index + 1).padStart(4, '0')}`,
    salesOrderId: `SO-2024-${String(faker.number.int({ min: 1, max: 22 })).padStart(3, '0')}`,
    product: `${faker.commerce.productName()} (${faker.string.alphanumeric(8).toUpperCase()})`,
    blockedQty: faker.number.int({ min: 10, max: 100 }),
    requester: faker.person.fullName(),
    approver: faker.person.fullName(),
    expiry: faker.date.future({ years: 0.1 }).toLocaleDateString(),
    status: faker.helpers.arrayElement(['Active', 'Expired', 'Released']),
  }));

  const columns = [
    { key: 'id', label: 'Block ID' },
    { key: 'salesOrderId', label: 'Sales Order', render: (value) => <button onClick={() => navigate(`/sales-orders/${value}`)} className="text-blue-600">{value}</button> },
    { key: 'product', label: 'Product' },
    { key: 'blockedQty', label: 'Blocked Qty' },
    { key: 'requester', label: 'Requester' },
    { key: 'approver', label: 'Approver' },
    { key: 'expiry', label: 'Expiry Date' },
    { key: 'status', label: 'Status', render: (value) => <StatusBadge status={value === 'Active' ? 'Blocked' : value} /> },
    {
      key: 'actions',
      label: 'Actions',
      render: (_, row) => (
        <div className="flex space-x-2">
          <button className="p-1 text-blue-600" title="View Details"><Eye className="h-4 w-4" /></button>
          {row.status === 'Active' && <button className="p-1 text-green-600" title="Release Block"><Unlock className="h-4 w-4" /></button>}
        </div>
      ),
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Inventory Blocks</h1>
          <p className="text-gray-600">View all active and past inventory blocks.</p>
        </div>
      </div>
      <DataTable columns={columns} data={blocks} selectable={true} />
    </div>
  );
};

export default InventoryBlockingList;
PK
     �*7[���'
  '
     src/components/fpo/FPOList.jsximport React from 'react';
import { useNavigate } from 'react-router-dom';
import { Plus, Eye, Edit, Truck } from 'lucide-react';
import DataTable from '../ui/DataTable';
import StatusBadge from '../ui/StatusBadge';
import { faker } from '@faker-js/faker';

const FPOList = () => {
  const navigate = useNavigate();

  const fpos = Array.from({ length: 10 }, (_, index) => ({
    id: `FPO-2024-${String(index + 1).padStart(3, '0')}`,
    salesOrderId: `SO-2024-${String(faker.number.int({ min: 1, max: 22 })).padStart(3, '0')}`,
    vendor: faker.company.name(),
    status: faker.helpers.arrayElement(['Draft', 'Submitted', 'Approved', 'Vendor Confirmed', 'Shipped', 'Delivered']),
    eta: faker.date.future({ years: 0.2 }).toLocaleDateString(),
    totalValue: faker.finance.amount(2000, 20000, 2, '$'),
  }));

  const columns = [
    {
      key: 'id',
      label: 'FPO No.',
      render: (value, row) => <button onClick={() => navigate(`/fpo/${row.id}`)} className="text-blue-600 hover:text-blue-800 font-medium">{value}</button>,
    },
    { key: 'vendor', label: 'Vendor' },
    { key: 'salesOrderId', label: 'Linked Sales Order' },
    { key: 'eta', label: 'ETA' },
    { key: 'totalValue', label: 'Value' },
    { key: 'status', label: 'Status', render: (value) => <StatusBadge status={value} /> },
    {
      key: 'actions',
      label: 'Actions',
      render: (_, row) => (
        <div className="flex space-x-2">
          <button onClick={() => navigate(`/fpo/${row.id}`)} className="p-1 text-blue-600" title="View"><Eye className="h-4 w-4" /></button>
          <button onClick={() => navigate(`/fpo/${row.id}`)} className="p-1 text-gray-600" title="Edit"><Edit className="h-4 w-4" /></button>
          <button className="p-1 text-green-600" title="Track"><Truck className="h-4 w-4" /></button>
        </div>
      ),
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Forward Purchase Orders (FPO)</h1>
          <p className="text-gray-600">Manage procurement from vendors for backorders.</p>
        </div>
        <button
          onClick={() => navigate('/fpo/new')}
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          <Plus className="h-4 w-4 mr-2" />
          New FPO
        </button>
      </div>
      <DataTable columns={columns} data={fpos} onRowClick={(row) => navigate(`/fpo/${row.id}`)} selectable={true} />
    </div>
  );
};

export default FPOList;
PK
     �*7[               src/components/issuance/PK
     �*7[���LR	  R	  (   src/components/issuance/IssuanceList.jsximport React from 'react';
import { useNavigate } from 'react-router-dom';
import { Eye, Plus } from 'lucide-react';
import DataTable from '../ui/DataTable';
import StatusBadge from '../ui/StatusBadge';
import { faker } from '@faker-js/faker';

const IssuanceList = () => {
  const navigate = useNavigate();

  const issuances = Array.from({ length: 15 }, (_, index) => ({
    id: `ISS-2024-${String(index + 1).padStart(4, '0')}`,
    salesOrderId: `SO-2024-${String(faker.number.int({ min: 1, max: 22 })).padStart(3, '0')}`,
    source: `FPO-${String(faker.number.int({ min: 1, max: 10 })).padStart(3, '0')}`,
    customer: faker.company.name(),
    status: faker.helpers.arrayElement(['Issued', 'Partial', 'Pending']),
    issuedBy: faker.person.fullName(),
    issuedDate: faker.date.recent({ days: 10 }).toLocaleDateString(),
  }));

  const columns = [
    {
      key: 'id',
      label: 'Issuance ID',
      render: (value, row) => <button onClick={() => navigate(`/issuance/${row.id}`)} className="text-blue-600 hover:text-blue-800 font-medium">{value}</button>,
    },
    { key: 'salesOrderId', label: 'Sales Order' },
    { key: 'source', label: 'Source' },
    { key: 'customer', label: 'Customer' },
    { key: 'issuedBy', label: 'Issued By' },
    { key: 'issuedDate', label: 'Issued Date' },
    { key: 'status', label: 'Status', render: (value) => <StatusBadge status={value} /> },
    {
      key: 'actions',
      label: 'Actions',
      render: (_, row) => (
        <div className="flex space-x-2">
          <button onClick={() => navigate(`/issuance/${row.id}`)} className="p-1 text-blue-600" title="View Details"><Eye className="h-4 w-4" /></button>
        </div>
      ),
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Inventory Issuance</h1>
          <p className="text-gray-600">Track items issued from the warehouse for delivery.</p>
        </div>
        <button className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          <Plus className="h-4 w-4 mr-2" />
          Manual Issuance
        </button>
      </div>
      <DataTable columns={columns} data={issuances} onRowClick={(row) => navigate(`/issuance/${row.id}`)} />
    </div>
  );
};

export default IssuanceList;
PK
     �*7[���	  �	  &   src/components/invoice/InvoiceList.jsximport React from 'react';
import { useNavigate } from 'react-router-dom';
import { Plus, Eye, Edit } from 'lucide-react';
import DataTable from '../ui/DataTable';
import StatusBadge from '../ui/StatusBadge';
import { faker } from '@faker-js/faker';

const InvoiceList = () => {
  const navigate = useNavigate();

  const invoices = Array.from({ length: 25 }, (_, index) => ({
    id: `INV-2024-${String(index + 1).padStart(4, '0')}`,
    salesOrderId: `SO-2024-${String(faker.number.int({ min: 1, max: 22 })).padStart(3, '0')}`,
    customer: faker.company.name(),
    status: faker.helpers.arrayElement(['Draft', 'Approved', 'Sent', 'Paid']),
    dueDate: faker.date.future({ years: 0.1 }).toLocaleDateString(),
    total: faker.finance.amount(5000, 50000, 2, '$'),
  }));

  const columns = [
    {
      key: 'id',
      label: 'Invoice No.',
      render: (value, row) => <button onClick={() => navigate(`/invoices/${row.id}`)} className="text-blue-600 hover:text-blue-800 font-medium">{value}</button>,
    },
    { key: 'salesOrderId', label: 'Linked Sales Order' },
    { key: 'customer', label: 'Customer' },
    { key: 'dueDate', label: 'Due Date' },
    { key: 'total', label: 'Total' },
    { key: 'status', label: 'Status', render: (value) => <StatusBadge status={value} /> },
    {
      key: 'actions',
      label: 'Actions',
      render: (_, row) => (
        <div className="flex space-x-2">
          <button onClick={() => navigate(`/invoices/${row.id}`)} className="p-1 text-blue-600" title="View"><Eye className="h-4 w-4" /></button>
          <button onClick={() => navigate(`/invoices/${row.id}`)} className="p-1 text-gray-600" title="Edit"><Edit className="h-4 w-4" /></button>
        </div>
      ),
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Invoices</h1>
          <p className="text-gray-600">Manage customer billing and payments.</p>
        </div>
        <button
          onClick={() => navigate('/invoices/new')}
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          <Plus className="h-4 w-4 mr-2" />
          New Invoice
        </button>
      </div>
      <DataTable columns={columns} data={invoices} onRowClick={(row) => navigate(`/invoices/${row.id}`)} selectable={true} />
    </div>
  );
};

export default InvoiceList;
PK
     �*7[               src/components/settings/PK
     �*7[��v	  v	  $   src/components/settings/Settings.jsximport React, { useState } from 'react';
import { User, Bell, Building, Users } from 'lucide-react';

const Settings = () => {
  const [activeTab, setActiveTab] = useState('profile');

  const tabs = [
    { id: 'profile', label: 'My Profile', icon: User },
    { id: 'notifications', label: 'Notifications', icon: Bell },
    { id: 'company', label: 'Company Details', icon: Building },
    { id: 'users', label: 'Users & Roles', icon: Users },
  ];

  const renderContent = () => {
    switch (activeTab) {
      case 'profile':
        return (
          <div className="space-y-4">
            <h3 className="text-lg font-medium">Profile Information</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <input type="text" defaultValue="John Smith" placeholder="Full Name" className="px-3 py-2 border rounded-md" />
              <input type="email" defaultValue="john.smith@company.com" placeholder="Email Address" className="px-3 py-2 border rounded-md" />
              <input type="password" placeholder="New Password" className="px-3 py-2 border rounded-md" />
              <input type="password" placeholder="Confirm New Password" className="px-3 py-2 border rounded-md" />
            </div>
            <button className="px-4 py-2 bg-blue-600 text-white rounded-lg">Save Changes</button>
          </div>
        );
      default:
        return <p>This section is under construction.</p>;
    }
  };

  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold text-gray-900">Settings</h1>
      <div className="flex flex-col md:flex-row gap-6">
        <div className="md:w-1/4">
          <nav className="space-y-1">
            {tabs.map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-md ${
                  activeTab === tab.id
                    ? 'bg-blue-50 text-blue-700'
                    : 'text-gray-700 hover:bg-gray-50'
                }`}
              >
                <tab.icon className="h-5 w-5 mr-3" />
                {tab.label}
              </button>
            ))}
          </nav>
        </div>
        <div className="md:w-3/4 bg-white rounded-lg shadow p-6">
          {renderContent()}
        </div>
      </div>
    </div>
  );
};

export default Settings;
PK
     �*7[% Sk�  �  /   src/components/inward/ChildPartMappingModal.jsximport React, { useState } from 'react';
import { X, Plus, Trash2 } from 'lucide-react';

const ChildPartMappingModal = ({ item, onClose, onSave }) => {
  const [childParts, setChildParts] = useState([
    { id: 1, sku: 'CPU-01', name: 'Processor', quantity: 1, type: 'Component' },
    { id: 2, sku: 'RAM-04', name: 'Memory Module', quantity: 2, type: 'Component' },
  ]);

  const handleAddPart = () => {
    setChildParts([...childParts, { id: Date.now(), sku: '', name: '', quantity: 1, type: 'Component' }]);
  };

  const handlePartChange = (id, field, value) => {
    setChildParts(parts => parts.map(p => p.id === id ? { ...p, [field]: value } : p));
  };
  
  const handleRemovePart = (id) => {
    setChildParts(parts => parts.filter(p => p.id !== id));
  };

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-medium text-gray-900">Map Child Parts for {item.product}</h3>
          <button onClick={onClose} className="p-1 hover:bg-gray-100 rounded-full"><X className="h-5 w-5" /></button>
        </div>
        
        <p className="text-sm text-gray-600 mb-4">
          Define the child components or consumable parts that make up one unit of the parent SKU.
        </p>

        <div className="space-y-3 max-h-96 overflow-y-auto pr-2">
          {childParts.map(part => (
            <div key={part.id} className="grid grid-cols-12 gap-3 items-center">
              <input type="text" placeholder="SKU" value={part.sku} onChange={e => handlePartChange(part.id, 'sku', e.target.value)} className="col-span-3 px-2 py-1 border rounded-md text-sm" />
              <input type="text" placeholder="Part Name" value={part.name} onChange={e => handlePartChange(part.id, 'name', e.target.value)} className="col-span-4 px-2 py-1 border rounded-md text-sm" />
              <input type="number" placeholder="Qty" value={part.quantity} onChange={e => handlePartChange(part.id, 'quantity', parseInt(e.target.value))} className="col-span-2 px-2 py-1 border rounded-md text-sm" />
              <select value={part.type} onChange={e => handlePartChange(part.id, 'type', e.target.value)} className="col-span-2 px-2 py-1 border rounded-md text-sm">
                <option>Component</option>
                <option>Consumable</option>
              </select>
              <button onClick={() => handleRemovePart(part.id)} className="col-span-1 text-red-500 hover:text-red-700"><Trash2 className="h-4 w-4" /></button>
            </div>
          ))}
        </div>
        
        <button onClick={handleAddPart} className="flex items-center text-sm text-blue-600 mt-4"><Plus className="h-4 w-4 mr-1" /> Add Part</button>

        <div className="flex justify-end space-x-3 mt-6">
          <button onClick={onClose} className="px-4 py-2 border rounded-lg hover:bg-gray-50">Cancel</button>
          <button onClick={() => onSave(childParts)} className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Save Mappings</button>
        </div>
      </div>
    </div>
  );
};

export default ChildPartMappingModal;
PK
     �*7[���*    *   src/components/issuance/IssuanceDetail.jsximport React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ArrowLeft, Download, FileText, Truck, AlertCircle } from 'lucide-react';
import StatusBadge from '../ui/StatusBadge';

const IssuanceDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  const issuance = {
    id,
    salesOrderId: 'SO-2024-018',
    sourceFpoId: 'FPO-2024-009',
    sourceInwardId: 'INW-2024-012',
    customer: 'Industrial Ltd',
    issuedBy: 'Mike Wilson (Storekeeper)',
    issuedDate: '2024-03-10',
    status: 'Issued',
    items: [
      { code: 'MOT-001', name: 'Motor Parts', issuedQty: 10, batchNo: 'B-MP-0310', allocatedTo: 'SO-2024-018 Line 1' },
      { code: 'SEN-005', name: 'Sensor Array', issuedQty: 5, batchNo: 'B-SA-0310', allocatedTo: 'SO-2024-018 Line 2' },
    ],
    notes: 'Items packed and ready for dispatch. Awaiting pickup by logistics partner.',
    attachments: [
      { name: 'vendor_invoice_VI-5823.pdf', url: '#' },
      { name: 'packing_list_PL-5823.pdf', url: '#' },
    ]
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-wrap items-center justify-between gap-4">
        <div className="flex items-center space-x-4">
          <button onClick={() => navigate('/issuance')} className="p-2 hover:bg-gray-100 rounded-lg"><ArrowLeft className="h-5 w-5" /></button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Issuance Confirmation {issuance.id}</h1>
            <div className="flex items-center space-x-4 text-sm text-gray-500 mt-1">
                <span>From Inward: 
                    <button className="text-blue-600 hover:underline ml-1">{issuance.sourceInwardId}</button>
                </span>
                <span>Source FPO: 
                    <button className="text-blue-600 hover:underline ml-1">{issuance.sourceFpoId}</button>
                </span>
            </div>
          </div>
          <StatusBadge status={issuance.status} />
        </div>
        <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
            <Download className="h-4 w-4 mr-2" />
            Download Issuance Note
        </button>
      </div>

      {/* Details Section */}
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-lg font-medium text-gray-900 mb-4">Issuance Summary</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
                <p className="text-sm text-gray-500">Allocated to Sales Order</p>
                <p className="font-medium text-blue-600 hover:underline cursor-pointer">{issuance.salesOrderId}</p>
            </div>
            <div>
                <p className="text-sm text-gray-500">Customer</p>
                <p className="font-medium">{issuance.customer}</p>
            </div>
            <div>
                <p className="text-sm text-gray-500">Issued By / Date</p>
                <p className="font-medium">{issuance.issuedBy} on {issuance.issuedDate}</p>
            </div>
        </div>
      </div>
      
      {/* Issued Items Table */}
      <div className="bg-white rounded-lg shadow">
        <div className="p-6 border-b"><h2 className="text-lg font-medium text-gray-900">Issued Items</h2></div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Product</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Issued Qty</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Batch/Serial No.</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Allocated To</th>
              </tr>
            </thead>
            <tbody className="divide-y">
              {issuance.items.map(item => (
                <tr key={item.code}>
                  <td className="px-6 py-4 whitespace-nowrap">{item.name} ({item.code})</td>
                  <td className="px-6 py-4 whitespace-nowrap">{item.issuedQty}</td>
                  <td className="px-6 py-4 whitespace-nowrap">{item.batchNo}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{item.allocatedTo}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Notes & Attachments */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Issuance Notes</h2>
            <p className="text-sm text-gray-700">{issuance.notes || 'No notes provided.'}</p>
        </div>
        <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Linked Attachments</h2>
            <ul className="space-y-2">
                {issuance.attachments.map((file, index) => (
                    <li key={index} className="flex items-center text-sm">
                        <FileText className="h-4 w-4 mr-2 text-gray-500"/>
                        <a href={file.url} className="text-blue-600 hover:underline">{file.name}</a>
                    </li>
                ))}
            </ul>
        </div>
      </div>

      {/* Post-Issuance Status */}
      <div className="bg-blue-50 border-l-4 border-blue-500 text-blue-800 p-4 rounded-r-lg" role="alert">
        <div className="flex">
          <div className="py-1"><AlertCircle className="h-5 w-5 mr-3"/></div>
          <div>
            <p className="font-bold">Inventory Updated</p>
            <p className="text-sm">The issued quantities have been deducted from available stock. The linked Sales Order lines now show as 'Allocated' and are ready for dispatch scheduling.</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default IssuanceDetail;
PK
     �*7[1�K��  �  .   src/components/inventory/BlockRequestModal.jsximport React, { useState } from 'react';
import { X, Upload, Calendar } from 'lucide-react';

const BlockRequestModal = ({ item, onClose, onSubmit }) => {
  const [details, setDetails] = useState({
    quantity: item?.requestedQty - Math.max(0, item?.availableQty - item?.blockedQty) || 0,
    startDate: new Date().toISOString().split('T')[0],
    endDate: new Date(new Date().setDate(new Date().getDate() + 7)).toISOString().split('T')[0],
    justification: '',
    attachments: [],
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setDetails(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(details);
  };

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg p-6 w-full max-w-lg shadow-xl">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-medium text-gray-900">Request Inventory Block</h3>
          <button onClick={onClose} className="p-1 hover:bg-gray-100 rounded-full"><X className="h-5 w-5" /></button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <p className="text-sm text-gray-500">Product</p>
            <p className="font-medium">{item.product} ({item.code})</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="quantity" className="block text-sm font-medium text-gray-700">Quantity to Block</label>
              <input
                type="number"
                id="quantity"
                name="quantity"
                value={details.quantity}
                onChange={handleChange}
                className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md"
                required
              />
            </div>
            <div />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700">Blocking Period</label>
            <div className="flex items-center space-x-2 mt-1">
              <div className="relative flex-1">
                <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="date"
                  name="startDate"
                  value={details.startDate}
                  onChange={handleChange}
                  className="w-full pl-9 pr-3 py-2 border border-gray-300 rounded-md"
                  required
                />
              </div>
              <span>to</span>
              <div className="relative flex-1">
                <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="date"
                  name="endDate"
                  value={details.endDate}
                  onChange={handleChange}
                  className="w-full pl-9 pr-3 py-2 border border-gray-300 rounded-md"
                  required
                />
              </div>
            </div>
          </div>

          <div>
            <label htmlFor="justification" className="block text-sm font-medium text-gray-700">Justification</label>
            <textarea
              id="justification"
              name="justification"
              value={details.justification}
              onChange={handleChange}
              rows="3"
              className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md"
              placeholder="e.g., Securing stock for confirmed high-priority order."
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">Attachments</label>
            <div className="mt-1 border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
              <Upload className="mx-auto h-8 w-8 text-gray-400" />
              <p className="mt-2 text-sm text-gray-600">Click to upload supporting documents</p>
            </div>
          </div>

          <div className="flex justify-end space-x-3 pt-4">
            <button type="button" onClick={onClose} className="px-4 py-2 border rounded-lg hover:bg-gray-50">Cancel</button>
            <button type="submit" className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Submit Request</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default BlockRequestModal;
PK
     �*7[%�/�  �     netlify.toml[build]
  command = "npm install && npm run build"
  publish = "dist"
  base = "/"
  ignore = "false"  # Never skip build
  force = "true"    # Force build even if no changes detected

[build.environment]
  NODE_VERSION = "18"
  CI = "true"       # Ensure we're in CI mode
  NETLIFY_BUILD_SKIP = "false"  # Never skip build

[build.processing]
  skip_processing = false  # Ensure processing is not skipped

[dev]
  command = "vite"
  port = 3000
  publish = "dist"PK
     �*7[���@B  B  	   README.md# Project Setup
    
    To run this project, follow these steps:
    
    1. Extract the zip file.
    2. Run `npm install` to install dependencies.
    3. Run `npm run dev` to start the development server.
    
    This project was generated through Alpha. For more information, visit [dualite.dev](https://dualite.dev).PK 
     �*7[���      
                 .gitignorePK 
     �*7[�e���  �               6   eslint.config.jsPK 
     �*7[w���  �  
             b  index.htmlPK 
     �*7[5~=  =               }  package.jsonPK 
     �*7[S0�^   ^                �  postcss.config.jsPK 
     �*7[                        q  src/PK 
     �*7[.n�Y  Y               �  src/App.jsxPK 
     �*7[���;=   =                   src/index.cssPK 
     �*7[��`��   �                }   src/main.jsxPK 
     �*7[��8                   �!  tailwind.config.jsPK 
     �*7[9�Qh�   �                �"  vite.config.tsPK 
     �*7[                        �#  src/context/PK 
     �*7[�]ƽ;  ;               �#  src/context/AuthContext.jsxPK 
     �*7[�ž�  �  #             ^(  src/context/NotificationContext.jsxPK 
     �*7[                        P.  src/components/PK 
     �*7[                        }.  src/components/auth/PK 
     �*7[X?�Am  m  #             �.  src/components/auth/LoginScreen.jsxPK 
     �*7[                        ]F  src/components/layout/PK 
     �*7[����  �  $             �F  src/components/layout/MainLayout.jsxPK 
     �*7[��r�J  J  !             �I  src/components/layout/Sidebar.jsxPK 
     �*7[-���L  L                SY  src/components/layout/TopBar.jsxPK 
     �*7[                        �h  src/components/notifications/PK 
     �*7[��XЮ
  �
  2             i  src/components/notifications/NotificationPanel.jsxPK 
     �*7[                        t  src/components/ui/PK 
     �*7[t=�
  
  !             Ft  src/components/ui/StatusBadge.jsxPK 
     �*7[)�/A�$  �$               �z  src/components/ui/DataTable.jsxPK 
     �*7[                        R�  src/components/dashboard/PK 
     �*7[Y���  �  &             ��  src/components/dashboard/Dashboard.jsxPK 
     �*7[iM�0�  �  4             ��  src/components/dashboard/SalesExecutiveDashboard.jsxPK 
     �*7[��;��  �  2             ��  src/components/dashboard/SalesManagerDashboard.jsxPK 
     �*7[��`�  �  1             ��  src/components/dashboard/StorekeeperDashboard.jsxPK 
     �*7[                        ��  src/components/enquiry/PK 
     �*7[ߍ�k    &             �  src/components/enquiry/EnquiryList.jsxPK 
     �*7[Ƚ�Q�2  �2  (             ] src/components/enquiry/EnquiryDetail.jsxPK 
     �*7[�;@�    #             B8 src/components/ui/TimelinePanel.jsxPK 
     �*7[                        �? src/components/budget/PK 
     �*7[7�ʶ�F  �F  *             �? src/components/budget/BudgetCreateEdit.jsxPK 
     �*7[                        �� src/components/quotation/PK 
     �*7[ޠ�e6%  6%  0             �� src/components/quotation/QuotationCreateEdit.jsxPK 
     �*7[                        t� src/components/orders/PK 
     �*7[��;y�  �  +             �� src/components/orders/ReceivedOrderForm.jsxPK 
     �*7[��Ŵ0  �0  (             �� src/components/orders/SalesOrderForm.jsxPK 
     �*7[                        �� src/components/fpo/PK 
     �*7[b2�.  .               �� src/components/fpo/FPOForm.jsxPK 
     �*7[                         src/components/inward/PK 
     �*7[��;k�>  �>  '             R src/components/inward/InwardReceipt.jsxPK 
     �*7[                        S src/components/invoice/PK 
     �*7[�0͆  �  &             RS src/components/invoice/InvoiceForm.jsxPK 
     �*7[                        U src/components/inventory/PK 
     �*7[�[.��  �  ,             SU src/components/inventory/InventoryMaster.jsxPK 
     �*7[                        a^ src/components/audit/PK 
     �*7[`ܱ��	  �	  #             �^ src/components/audit/AuditTrail.jsxPK 
     �*7[�zY��
  �
  $             [h src/components/budget/BudgetList.jsxPK 
     �*7[��u�$  $  *             �s src/components/quotation/QuotationList.jsxPK 
     �*7[���_b
  b
  +             �� src/components/orders/ReceivedOrderList.jsxPK 
     �*7[��c
  
  (             �� src/components/orders/SalesOrderList.jsxPK 
     �*7[��M	  	  2             �� src/components/inventory/InventoryBlockingList.jsxPK 
     �*7[���'
  '
               k� src/components/fpo/FPOList.jsxPK 
     �*7[                        Ϊ src/components/issuance/PK 
     �*7[���LR	  R	  (             � src/components/issuance/IssuanceList.jsxPK 
     �*7[���	  �	  &             �� src/components/invoice/InvoiceList.jsxPK 
     �*7[                        �� src/components/settings/PK 
     �*7[��v	  v	  $             ¾ src/components/settings/Settings.jsxPK 
     �*7[% Sk�  �  /             z� src/components/inward/ChildPartMappingModal.jsxPK 
     �*7[���*    *             �� src/components/issuance/IssuanceDetail.jsxPK 
     �*7[1�K��  �  .             �� src/components/inventory/BlockRequestModal.jsxPK 
     �*7[%�/�  �               "  netlify.tomlPK 
     �*7[���@B  B  	              README.mdPK    D D   �   
